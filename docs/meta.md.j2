{% import 'macros.j2' as macros -%}

## Documentation Demos
<hr style="width:100%;border-bottom:3px solid black;">
!!! outline "Outline type"
    * [Admonitions](#admonitions)
    * [Inlined Examples](#inlined-examples)
    * [API](#api)
    * [File Embeddings](#file-embeddings)
    * [CLI Showcase](#cli-showcase)

### Images
<hr style="width:100%;border-bottom:3px solid black;">

Using img_link with reset class:

{{macros.img_link("escher-babel.png", mkdocs, "58%",align='center', class=" ")}}

------------------

Using `img_link class=cli_output align=center`:

```bash {.cli_example .language-bash}
$ ./demos/cmk/xephyr.cmk 
```
{{macros.img_link("gui1.gif", mkdocs, "95%", align='center',class="cli_output")}}

------------------

Fixed width, no args:

{{macros.img_link("tui-extension-1.png", mkdocs, "350px")}}


### Inlined Examples
<hr style="width:100%;border-bottom:3px solid black;">

* Numero uno `echo key=val | ./compose.mk jb`
* The second: `./compose.mk mk.def.read/cmk.default.dialect`
* Random: `echo testing | random --stuff`

### API
<hr style="width:100%;border-bottom:3px solid black;">
{# <hr style="width:95%;border-bottom:1px dashed black;"> #}

Using `macros.api_link_many`:

{{macros.api_link_many(['mk.def'],mkdocs)}}

<hr style="width:95%;border-bottom:1px dashed black;">

Missing target, Using `macros.parse_target_help('compose.mk', 'doesnt.exist',..`:

{{macros.parse_target_help('compose.mk', 'doesnt.exist', github=github)}}

<hr style="width:95%;border-bottom:1px dashed black;">

Parametric target, Using `macros.parse_target_help('compose.mk', 'flux.echo/%',..`:

{{macros.parse_target_help('compose.mk', 'flux.echo/%', github=github)}}

<hr style="width:95%;border-bottom:1px dashed black;">

Nonparametric target, Using `macros.parse_target_help('compose.mk', 'flux.ok',..`:

{{macros.parse_target_help('compose.mk', 'flux.ok', github=github)}}

<hr style="width:95%;border-bottom:1px dashed black;">

Using `macros.parse_help('compose.mk', 'Dockerfile',..`:

{{macros.parse_help('compose.mk', 'Dockerfile', github=github)}}

<hr style="width:95%;border-bottom:1px dashed black;">

Using `macros.parse_module_help('compose.mk', 'Dockerfile',..`:

{{macros.parse_module_help('compose.mk', 'Dockerfile', github=github)}}

<br/>

### File Embeddings
<hr style="width:100%;border-bottom:3px solid black;">

Using `macros.embed_demo`:

{{macros.embed_demo('demos/logging.mk', github=github)}}

Using `macros.embed_demo` where type=yaml :

{{macros.embed_demo('demos/data/docker-compose.yml', github=github, type='yaml')}}

{# {{macros.embed_demo('demos/data/docker-compose.yml', github=github, type='yaml')}} #}

### CLI Showcase
<hr style="width:95%;border-bottom:1px dashed black;">

Pairing `bash  {.cli_example}` and `json {.cli_output}`:

```bash {.cli_example}
$ ./compose.mk mk.parse/compose.mk
```
```json {.language-json .cli_output}
{
  ..
  "mk.parse/%": {
    "file": "compose.mk",
    "lineno": 2056,
    "chain": [],
    "type": "implicit",
    "docs": [
      " Parses the given Makefile, returning JSON output that describes the targets, docs, etc. This parsing is \"deep\", i.e. it returns docs & metadata for *included* targets as well. This uses a dockerized version of the pynchon[1] tool.",
      "",
      " REFS:",
      "* `[1]`: https://github.com/robot-wranglers/pynchon/",
      ""
    ],
    "prereqs": [],
    "regex": "mk.parse/.*",
    "implementors": []
  },
  ..
```

<hr style="width:95%;border-bottom:1px dashed black;">

Using `bash  {.cli_example} {.command-line}`:

```bash  {.cli_example} {.command-line}
# Output JSON using `jb`
$ echo key=val | ./compose.mk jb
{"key":"val"}

# Parse JSON using `jq`
$ echo key=val | ./compose.mk jb | ./compose.mk jq -r .key
val

# Alternate approach, outputting JSON without input-pipes.
# Fine for simple stuff, not suitable for more complicated use cases.
$ ./compose.mk jb key=val foo=bar
{"key":"val"}
```

<hr style="width:95%;border-bottom:1px dashed black;">

Using `bash  {.cli_example}`:

```bash {.cli_example data-prompt="$"}
$ ./compose.mk mk.def.read/cmk.default.dialect
[
  ["ðŸ¡†", "${stream.stdin} | ${jq} -r"],
  ["ðŸ¡„", "${jb}"],
  ["this.", "${make} "]
  ...
]
```

<hr style="width:95%;border-bottom:1px dashed black;">

Using `bash  {.cli_example}`:

``` bash {.cli_example}
# Opens 3 panes with container-shells
$ ./compose.mk loadf ./demos/data/docker-compose.yml \
    tux.open.service_shells/debian,alpine,debian

# Equivalently, using lower-level generic targets
$ ./compose.mk loadf ./demos/data/docker-compose.yml \
    tux.open/debian.shell,alpine.shell,debian.shell

# Opens 2 panes of bash-shells for the TUI container itself
$ ./compose.mk loadf ./demos/data/docker-compose.yml tux.open/io.bash,io.bash
```

### Snippets
<hr style="width:100%;border-bottom:3px solid black;">

Using `macros.code_table` with class="cli_example snippet":

{{macros.code_table('title', github=github, title='my title')}}

<hr style="width:95%;border-bottom:1px dashed black;">

Using `Makefile {.snippet .language-Makefile}`:

```Makefile {.snippet .language-Makefile}
# Include compose.mk for access to target API and macros.
include compose.mk

# If you brought tool containers, you'll want to import them.
# Call the bridge-building macro to get targets for each service.
$(eval $(call compose.import, docker-compose.yml))

# At this point, scaffolded targets are defined for 
# the tool containers mentioned in the compose file.
# Now you can dispatch any task to any tool container.
test: tool_container_name.dispatch/self.test
    ${make} io.print.banner/label

self.test:
	echo hello world from container `uname -n -v`
    compose.mk fooo bar 
    ./compose.mk fooo bar 
    ${self} io.print.banner/label
    this.test 
    ${make} io.print.banner/label
    ./path/to/place
    "./path/to/place"
    printf ./path/to/place
	
```
<hr style="width:95%;border-bottom:1px dashed black;">

Placeholder 

{#
## Macros 
------------------------

**advanced_topic:**
{{macros.advanced_topic("GUIs + docker is a complex topic.  <font color=red>This page is under construction.</font>")}}

**very_optional:**
{{macros.very_optional("very_optional Nulla et euismod nulla.")}}

!!! tip "{{title}}"
    {{content.replace('\n','\n    ')}}

{{macros.admonition_note("admonition_note","Nulla et euismod nulla.")}}

{{macros.admonition_info("admonition_info","Nulla et euismod nulla.")}}

{{macros.admonition("danger", "admonition_danger Advanced topic","Nulla et euismod nulla.")}}

**closer_look**
{{macros.closer_look("The eagle-eyed reader will have noticed that the shells we opened are running inside the TUI container. The project folder is already volume-mounted though, as is the hosts docker-socket. From here, you can imagine setting different working directories for each browser, or even different yazi builds with very different configuration and plugins. ")}}
    
**commentary**
{{macros.commentary("The eagle-eyed reader will have noticed that the shells we opened are running inside the TUI container. The project folder is already volume-mounted though, as is the hosts docker-socket. From here, you can imagine setting different working directories for each browser, or even different yazi builds with very different configuration and plugins. ")}}
#}

### Admonitions 
<hr style="width:100%;border-bottom:3px solid black;">

#### Admonitions Used
<hr style="width:95%;border-bottom:1px dashed black;">

!!! question "The Problem"
    Depending on how you're using it.. you'll need a playbook, maybe a config file and an inventory file, not to mention a python stack, and you'll need the ansible version itself pinned.  
    
    Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.
    
Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! goals "Goals"
    * No ansible-dependency on our host (of course we'll use docker)
    * Full access to ansible-modules via the command line
    * Full access to ansible-modules in `make` world, e.g. as composable target prerequisites
    * Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! road_map "Road Map"
    road_map Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! outline "Outline type"
    * commentary Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! danger "Danger Type"
    danger GUIs + docker is a complex topic.  <font color=red>This page is under construction.</font>  

#### Admonitions Not Used
<hr style="width:95%;border-bottom:1px dashed black;">


!!! commentary "Commentary type"
    commentary Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! info "Info Type"
    info Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! important "Important type!"
    important Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! warning "Warning Style"
    warning Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! quote "Quote type"
    quote Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! note "Note type"
    note Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.
!!! abstract "abstract type"
    abstract Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.
!!! info "info type"
    info Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.
!!! tip "tip type"
    tip Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.
!!! success "success type"
    success Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.
!!! failure "failure type"
    failure Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

!!! question "Question type"
    question Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.
!!! bug "Bug type"
    bug Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.
!!! example "example type"
    example Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.

<hr style="width:100%;border-bottom:3px solid black;">

* mkdocs, readthedocs 
* jinja2, pynchon
* [prismjs](https://prismjs.com/index.html) 
* [tabler icons](https://tabler.io/icons)
