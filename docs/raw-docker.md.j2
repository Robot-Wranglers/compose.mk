{% import 'macros.j2' as macros -%}

## Raw Docker Support
<hr style="width:100%;border-bottom:3px solid black;">

Usually it's a good idea to separate task-definitions from the containers they run, and [using the docker compose support]({{mkdocs.site_relative_url}}/bridge) is the recommended way to arrange things.  

However.. `compose.mk` sometimes needs more direct and low-level access to docker primitives for internal use, and this functionality is exposed for external use as well.  

**Note that functionality here is *use-case driven*** and so the [`docker.*` target api]({{mkdocs.site_relative_url}}/api/#api-docker) interface is not intended to be 1:1 with the docker CLI.  Using the docker CLI directly is still [idiomatic compose.mk](#), so we're not looking to replace it.  Instead, the offerings here are all building on top of it or making the common interactions somewhat smoother.

{#**For use-cases related to cleaning and refactoring bash-script or Makefiles that are already using the docker CLI,** there are various utility functions that are available as part of the [`docker.*` namespace of the API]({{mkdocs.site_relative_url}}/api/#api-docker).#}

### Tool-Container Defaults
<hr style="width:100%;border-bottom:3px solid black;">

Most of the low-level docker support in `compose.mk` makes the assumption that you're <u><strong>working with tool containers</strong></u>, and there's two important defaults that come along with this assumption:

1. **The working directory, which is usually the project root, is volume-mounted by default** so that it can be shared with containers.  
1. **The docker-socket is mounted and shared by default also.** 

In the first case, without sharing the working directory, tools could not do any file IO, and only stream-based communication would be possible.  And in the second case, the ability to access *other* dockerized tools from inside docker containers enables many other `compose.mk` features, from [structured io]({{mkdocs.site_relative_url}}/standard-lib#structured-io) and [stage stacks]({{mkdocs.site_relative_url}}/stages) to the [embedded TUI]({{mkdocs.site_relative_url}}/embedded-tui).

### Inlined Dockerfiles
<hr style="width:100%;border-bottom:3px solid black;">

The [polyglot demos]({{mkdocs.site_relative_url}}/demos/polyglots) and [these mad-science demos]({{mkdocs.site_relative_url}}/demos/matrioshka) show various use-cases for working with embedded images.  Below you can see test-cases that are exercising related raw docker support.

```Makefile
{{open('demos/inlined-dockerfile.mk','r').read().strip()}}
```

<br/>

{#### Dockerfile API
<hr style="width:100%;border-bottom:3px solid black;">
{{macros.api_link_many('Dockerfile', mkdocs)}}#}
### Dispatch Tasks in Containers
<hr style="width:100%;border-bottom:3px solid black;">

Dispatch for [imported tool containers]({{mkdocs.site_relative_url}}/bridge) is explained in detail [here]({{mkdocs.site_relative_url}}), and the [last section](#inlined-dockerfiles) includes examples of dispatch used with an embedded image. The situation is similar though for any other kind of stock image that actually ships with `make`.  

One of the smallest images preconfigured with `make` seems to be `debian/buildd`, so we'll use that here.  

```bash
# run the trivial `flux.ok` target inside the given image
$ img=debian/buildd:bookworm ./compose.mk docker.dispatch/flux.ok
```

As mentioned in [the installation docs]({{mkdocs.site_relative_url}}/integration/#docker-compose-integration), lots of your daily-driver images probably have `make` by default, including images for stuff like gcc, golang, maven, etc.  

### Other Docker Utilities
<hr style="width:100%;border-bottom:3px solid black;">

As we've seen elsewhere on this page, most of the use-cases for raw docker support are related to scripting with `compose.mk`.  Sometimes though the raw docker support has more of a [stand-alone / tool mode]({{mkdocs.site_relative_url}}/tool-overview) vibe. For usage hints along those lines, see the test cases below.

```Makefile
{{open('tests/docker-utils.sh','r').read().strip()}}
```
<br/>

{#
--------------------------------------
{{macros.inlined_help('docker.stat',mkdocs)}}
---------------------------------------------------
{{macros.inlined_help('Dockerfile.build',mkdocs)}}
---------------------------------------------------
{{macros.inlined_help('docker.stat',mkdocs)}}
---------------------------------------------------
#}

### Full Docker API 
<hr style="width:100%;border-bottom:3px solid black;">

Shortcuts for the relevant sections of the API are below:

{{macros.api_link_many('docker', mkdocs, exclude='docker-compose')}}
{{macros.api_link_many('Dockerfile', mkdocs)}}
{{macros.api_link_many('mk.docker', mkdocs)}}

<hr style="width:100%;border-bottom:3px solid black;">

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Wait for MkDocs to fully render the page including ToC
    setTimeout(function() {
        const heading = document.getElementById('raw-docker-support');
        const img = document.createElement('img');
        img.style.height = '2em'; img.style.verticalAlign = 'middle';
        img.src = '../img/docker.png'; 
        heading.insertBefore(img, heading.firstChild);
        img.style.marginRight = '10px';
        //heading.appendChild(img);
    }, 100); // Small delay to ensure ToC is already processed
});
</script>
