{% import 'macros.j2' as macros -%}

## Raw Docker Support
<hr style="width:100%;border-bottom:3px solid black;">

!!! Info "Info"
    **Note that functionality here is *use-case driven*** and so the [`docker.*` target api]({{mkdocs.site_relative_url}}/api/#api-docker) interface is not intended to be 1:1 with the docker CLI.  Using the docker CLI directly is still [idiomatic compose.mk]({{mkdocs.site_relative_url}}/style), so we're not looking to replace it.  Instead, the offerings here are all building on top of it or making common interactions somewhat smoother.

Usually it's a good idea to separate task-definitions from the containers runtime, and [using the docker compose support]({{mkdocs.site_relative_url}}/bridge) is really the recommended way to arrange things.

However.. `compose.mk` sometimes needs more direct and low-level access to docker primitives for internal use, and this functionality is exposed for external use as well.  

{#**For use-cases related to cleaning and refactoring bash-script or Makefiles that are already using the docker CLI,** there are various utility functions that are available as part of the [`docker.*` namespace of the API]({{mkdocs.site_relative_url}}/api/#api-docker).#}

### Tool-Container Defaults
<hr style="width:100%;border-bottom:3px solid black;">

Most of the low-level docker support in `compose.mk` makes the assumption that you're <u>working with tool containers</u>, and there's two important defaults that come along with this assumption:

1. **The working directory, which is usually the project root, is volume-mounted by default.**
1. **The docker-socket is mounted and shared by default also.** 

In the first case, without sharing the working directory, tools could not do any file IO, and only stream-based communication would be possible.  And in the second case, the ability to access *other* dockerized tools from inside docker containers enables many other `compose.mk` features, from [structured io]({{mkdocs.site_relative_url}}/standard-lib#structured-io) and [stage stacks]({{mkdocs.site_relative_url}}/stages) to the [embedded TUI]({{mkdocs.site_relative_url}}/embedded-tui).

### Dispatch Tasks in Containers
<hr style="width:100%;border-bottom:3px solid black;">

Dispatch for [imported tool containers from compose files]({{mkdocs.site_relative_url}}/bridge) is explained in detail [here]({{mkdocs.site_relative_url}}/container-dispatch), and [other sections of this page](#inlined-dockerfiles) show examples of dispatch used with an *embedded image*.

The situation is similar though for any other kind of **unmodified stock image**, as long as that image actually ships with `make`.  One of the smallest images preconfigured with `make` seems to be `debian/buildd`, so we'll use that here.  

```bash  {.cli_example}
# Run the trivial `flux.ok` target inside the given image
$ img=debian/buildd:bookworm ./compose.mk docker.dispatch/flux.ok
```
``` bash {.cli_output}
≣ docker.run // img=debian/buildd:bookworm 
Φ flux.ok // succeeding as requested! 
```

If you're doing something like the above frequently, then you can also use `compose.import.docker_image` to generate scaffolded targets that do the same thing:

{{macros.embed_demo('demos/import-image.mk', github=github)}}

As mentioned in [the installation docs]({{mkdocs.site_relative_url}}/integration/#docker-compose-integration), lots of your daily-driver images probably have `make` by default, including images for stuff like gcc, golang, maven, etc.

### Inlined Dockerfiles
<hr style="width:100%;border-bottom:3px solid black;">

The [polyglot demos]({{mkdocs.site_relative_url}}/demos/polyglots) and [these mad-science demos]({{mkdocs.site_relative_url}}/demos/matrioshka) show various use-cases for working with embedded images.  Below you can see test-cases that are exercising related raw docker support.

{{macros.embed_demo('demos/inlined-dockerfile.mk', github=github,
    bottom_right=macros.link_mirror(
      'demos/cmk/code-objects.cmk',
      link=mkdocs.site_relative_url+'/compiler/#dockerfile-example'))}}

{#
For an approach with better style and more native syntax, see also [this example in CMK-lang]({{mkdocs.site_relative_url}}/compiler/#dockerfile-example)
#}

### Other Docker Utilities
<hr style="width:100%;border-bottom:3px solid black;">

Most of the use-cases for raw docker support are related to scripting with `compose.mk`.  Sometimes though the raw docker support has more of a [stand-alone / tool mode]({{mkdocs.site_relative_url}}/tool-overview) vibe. For usage hints along those lines, see the test cases below.

{{macros.embed_demo(
    'tests/docker-utils.sh', type='bash',
    class='language-bash language-shell test_suite', github=github)}}

### Full Docker API 
<hr style="width:100%;border-bottom:3px solid black;">

Below, you can find quick links for the [docker]({{mkdocs.site_relative_url}}/api/#api-docker) / [Dockerfile]({{mkdocs.site_relative_url}}/api/#api-dockerfile) / [mk.docker]({{mkdocs.site_relative_url}}/api/#api-mkdocker) sections of the main API.


{{macros.api_link_many(['docker'], mkdocs, exclude='docker-compose')}}

--------------

{{macros.api_link_many(['Dockerfile','mk.docker'], mkdocs)}}

<hr style="width:100%;border-bottom:3px solid black;">

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Wait for MkDocs to fully render the page including ToC
    setTimeout(function() {
        const heading = document.getElementById('raw-docker-support');
        const img = document.createElement('img');
        img.style.height = '2em'; img.style.verticalAlign = 'middle';
        img.src = '../img/docker.png'; 
        heading.insertBefore(img, heading.firstChild);
        img.style.marginRight = '10px';
        //heading.appendChild(img);
    }, 100); // Small delay to ensure ToC is already processed
});
</script>
