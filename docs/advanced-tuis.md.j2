{% import 'macros.j2' as macros -%}

## Advanced TUIs 
<hr style="width:100%;border-bottom:3px solid black;">

In the limit, `compose.mk` can help you to script *custom console applications* that potentially involve many containers, and by using [mk.self]({{mkdocs.site_relative_url}}/demos/packaging) you can even "compile" them to stand-alone executables.  This works best for building things like dashboards, but it's even possible to build things that resemble **portable, project-specific IDEs**.

Extreme customization of the TUI isn't well documented yet, but this page has a few hints and an overview of existing examples.

### Extensions & Scripting
<hr style="width:100%;border-bottom:3px solid black;">

As a minimal example of extending the TUI, let's throw together some support for `yazi`, a pretty cool terminal-based file-manager.  It[supports lots of stuff](https://yazi-rs.github.io/features), including file-previews, skins, and plugins.

Consider the following Makefile:

```Makefile
{{open('demos/tui/extension-1.mk','r').read().strip()}}
```

Running this opens a split-screen console with both panes showing an interactive bash terminal.  

{{macros.img_link("tui-extension-1.png", mkdocs, "350px")}}

The eagle-eyed reader will have noticed that the shells we opened are *running inside the TUI container*.  The project folder is already volume-mounted though, as is the hosts docker-socket.

<hr style="width:95%;border-bottom:1px dashed black;">

### Understanding Widgets
<hr style="width:100%;border-bottom:3px solid black;">

We've seen [previously]({{mkdocs.site_relative_url}}/low-config-tuis/) that "widgets", i.e. TUI pane-content, are nothing very special.  Like everything else in `compose.mk`, these are just targets, but some targets are more useful than others for display inside the TUI!  

Typically you might want targets that loop, like we saw with running a basic `test` target.  Looping tricks with {{macros.api_link('flux.loopf',mkdocs)}} and friends can also "restore" pane content in case of crash, like say a hiccup in networking activity.

As a reminder, **all widgets run *in* the TUI container, not on the docker host**, even though we can frequently ignore this!  Thus, we don't know for sure what tooling is available on the host, and many widgets should be considered a ["private" section of the API](#).  

```Makefile
{{open('demos/tui/extension-2.mk','r').read().strip()}}
```

{{macros.img_link("tui-extension-2.png", mkdocs, "350px")}}

{#
Some widgets can run anywhere though, and those targets may be considered "public".  See for example {{macros.api_link('tux.widget.ticket',mkdocs)}}.

```bash
# Rotates a string across the display, marquee style.
text=mytext ./compose.mk tux.widget.ticker
```
#}
### Environment Variables
<hr style="width:100%;border-bottom:3px solid black;">

{{bash('pattern="TUI Environment" ./compose.mk mk.parse.block/compose.mk')}}

Here's a list of environment variables related to the TUI, as generated by the `./compose.mk io.env/TUI` command.  

```ini 
{{bash("./compose.mk io.env/TUI")}}
```
