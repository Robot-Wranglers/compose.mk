{% import 'macros.j2' as macros -%}

## API / CLI Documentation

<hr style="width:100%;border-bottom:3px solid black;">

As discussed [elsewhere](#), one major advantage of `make` is that the programmatic interface *is* the command-line interface, and vice versa.

As such, all the documentation here is doing double duty, and technically any of these targets can be used as a [prerequisite for other targets](#) or as a command-line entrypoint.  

Your milage may vary though; for example entrypoints for TUI interfaces are better thought of as "commands" and internals like [`flux.*`](#flux-api) or [`mk.*` targets](#mk-api) are normally just used in a scripting context.

### compose.mk: (Dynamic Targets)

<hr style="width:100%;border-bottom:3px solid black;">

The autogenerated section of the API (i.e. what's created by `compose.import`) is documented as part of the [Make/Compose Bridge]({{mkdocs.site_relative_url}}/bridge).


### compose.mk: (Static Targets)

<hr style="width:100%;border-bottom:3px solid black;">

This is the complete list of namespaces & public targets available from `compose.mk`, along with their documentation.  Most documentation is pulled automatically from [the latest source]({{github.repo_url}}/tree/master/compose.mk).  Some important notes about how these targets work:

* **No requirements for `k8s-tools.yml` or `k8s.mk`.**
* **Targets are usable interactively from your shell** as `make <target>` or `./compose.mk <target>`
* **Targets are usable as an API,** either as prereq-targets or as part of the body in your project automation.
* **Most targets are pure shell, and have no exotic dependencies.** That means that they generally run fine on host or as dispatched targets inside containers.  *(Exceptions: targets in `stream.json.*` require `jq` and targets in `docker.*` require docker.)*
* **Target names are reserved names after declaration.**

Things are organized into a few namespaces, which hopefully avoids collisions with your project targets.

| Namespace             | Description                                                                                         |
| --------------------- | --------------------------------------------------------------------------------------------------- |
| [*`io.*`* targets:]({{mkdocs.site_relative_url}}/api#api-io)           | Misc text-formatters, timers, and other utilities                                                          |
| [*`docker.*`* targets:]({{mkdocs.site_relative_url}}/api#api-docker)   | Simple helpers for working with docker.                                                                    |
| [*`flux.*`*]({{mkdocs.site_relative_url}}/api#api-flux)                | Miniature workflow library / pipe wizard.                                                                  |
| [*`tux.*`*  targets:]({{mkdocs.site_relative_url}}/api#api-tux)        | Embedded TUI support.                                                                                      |
| [*`mk.*`*  targets:]({{mkdocs.site_relative_url}}/api#api-mk)       | Low-level helpers for working with make.                                                                   |
| [*`stream.*`* targets:]({{mkdocs.site_relative_url}}/api#api-stream)   | Support for IO streams, including basic stuff with JSON, newline-delimited, and space-delimited formats.   |

{% set help_extra="Docs below typically refer to `compose.mk` as the executable involved, but if you're using integrated rather than stand-alone mode, you should use `make` instead to work with your own project's context!" %}

#### API: tux

<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('compose.mk','tux')}}

See the [TUI documentation]({{mkdocs.site_relative_url}}/compose.mk#embedded-tui) for a high-level overview of what this is and how it works.  For more details, [see the main TUI docs]({{mkdocs.site_relative_url}}/compose.mk#embedded-tui), read on into the API, or see the [tux container spec in compose.mk]({{macros.search_link('compose.mk', 'tux', github)}})

{{macros.parse_help('compose.mk', 'tux', help_extra)}}

#### API: io

<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('compose.mk','io')}}

{{macros.parse_help('compose.mk', 'io', github)}}

#### API: docker

<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('compose.mk','docker')}}

{{macros.parse_help('compose.mk', 'docker', github)}}

#### API: flux

<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('compose.mk','flux')}}

See especially the [Platform Setup Example]({{mkdocs.site_relative_url}}/demos#demo-platform-setup) for a more complete walk-through of motivation, starting from an example use-case.

{{macros.parse_help('compose.mk','flux', github)}}

#### API: mk

<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('compose.mk','mk')}}

{#
See especially the [Platform Setup Example]({{mkdocs.site_relative_url}}/demos#demo-platform-setup) for a more complete walk-through of motivation, starting from an example use-case.
#}

{{macros.parse_help('compose.mk','mk', github)}}

#### API: stream

<hr style="width:100%;border-bottom:3px solid black;">

{{macros.parse_module_help('compose.mk','stream')}}

{{macros.parse_help('compose.mk', 'stream', github)}}

##### TUI Private API

<hr style="width:100%;border-bottom:3px solid black;">

The [public API for `tux.*` targets]({{mkdocs.site_relative_url}}/api#api-tux) describes several lower-level operations that can safely be performed inside or outside of the TUI (i.e. on the docker host).

There's also a "private" API, which targets are under the namespace `.tux.*`, and which is characterized by actually issuing commands to tmux directly.  The private API is intended to be used from *inside* the `tux` container or containers that extend it.  This ensures that your host doesn't actually require a tmux stack, and also ensures that usage of the TUI is always relatively stateless.  (It's not extensively tested yet, but in theory it should be generally safe to run multiple copies of the TUI, and embed TUIs in TUIs, etc.)

See the [API docs]({{mkdocs.site_relative_url}}/api#tui-private-api)

{{macros.parse_help('compose.mk', '.tux', include_private=True)}}

<hr style="width:100%;border-bottom:3px solid black;">