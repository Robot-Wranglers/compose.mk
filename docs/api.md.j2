{% import 'macros/base.j2' as macros -%}{% import 'macros/site.j2' as site -%}

## API / CLI Documentation
<hr style="width:100%;border-bottom:3px solid black;">

!!! tip "Tip"
    A major advantage of `make` is that the programmatic interface *is* the command-line interface, and vice versa, so the documentation here is often relevant for [tool mode]({{mkdocs.site_relative_url}}/tool-overview) or [library mode]({{mkdocs.site_relative_url}}/standard-lib).
    
    Note that the autogenerated section of the API (i.e. scaffolded targets created by `compose.import`) is **not** presented here.. see instead the docs for the [Make/Compose Bridge]({{mkdocs.site_relative_url}}/bridge).

{#Your milage may vary though; for example much ofTUI interfaces are better thought of as "commands" and internals like [`flux.*`]({{mkdocs.site_relative_url}}/api#flux-api) or [`mk.*` targets]({{mkdocs.site_relative_url}}/api#mk-api) are normally just used in a scripting context.#}


This is the complete list of public targets available from `compose.mk`, along with their documentation.  Things are organized into a few namespaces, so hopefully if you're using this stuff programmatically that helps to avoid collisions with your project targets.  See [the module layout overview]({{mkdocs.site_relative_url}}/standard-lib/#module-layout) for more details.  Most documentation is pulled automatically from [the latest source]({{github.repo_url}}).  

Some important notes about how these targets work:

* **Target names are reserved names after declaration.**
* **Targets are usable interactively from your shell** as `make <target>` or `./compose.mk <target>`
* **Targets are usable as an API,** either as prereq-targets or as part of the body in your project automation.
* **Most targets are pure shell, and have no exotic dependencies.** That means that they generally run fine on host or as dispatched targets inside containers.

{% include "api/io.md.j2" %}
#### [API: compose](#api-compose)
<hr style="width:100%;border-bottom:3px solid black;">

{{site.parse_module_help('compose.mk', 'compose')}}

{{site.parse_help('compose.mk', 'compose', github)}}

#### [API: docker](#api-docker)
<hr style="width:100%;border-bottom:3px solid black;">

{{site.parse_module_help('compose.mk', 'docker')}}

{{site.parse_help('compose.mk', 'docker', github)}}

#### [API: Dockerfile](#api-dockerfile)
<hr style="width:100%;border-bottom:3px solid black;">

{{site.parse_module_help('compose.mk', 'Dockerfile')}}

{{site.parse_help('compose.mk', 'Dockerfile', github)}}

{% include "api/flux.md.j2" %}

#### [API: mk](#api-mk)
<hr style="width:100%;border-bottom:3px solid black;">

{{site.parse_module_help('compose.mk', 'mk')}}


{{site.parse_help('compose.mk','mk', github)}}

#### [API: stream](#api-stream)
<hr style="width:100%;border-bottom:3px solid black;">

{{site.parse_module_help('compose.mk', 'stream')}}

{{site.parse_help('compose.mk', 'stream', github)}}

{{site.parse_module_help('compose.mk', 'stream')}}

<script>
document.addEventListener('DOMContentLoaded', function() {setTimeout(function() {
	addImageToHeader('api-stream','/{{mkdocs.config.site_name}}/img/api.svg')
	addImageToHeader('api-io','/{{mkdocs.config.site_name}}/img/api.svg')
	addImageToHeader('api-mk','/{{mkdocs.config.site_name}}/img/api.svg')
	addImageToHeader('api-stream','/{{mkdocs.config.site_name}}/img/api.svg')
	addImageToHeader('api-dockerfile','/{{mkdocs.config.site_name}}/img/api.svg')
	addImageToHeader('api-flux','/{{mkdocs.config.site_name}}/img/api.svg')
	addImageToHeader('api-docker','/{{mkdocs.config.site_name}}/img/api.svg')
	addImageToHeader('api-compose','/{{mkdocs.config.site_name}}/img/api.svg')
}, 100);});
</script>
