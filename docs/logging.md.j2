{% import 'macros.j2' as macros -%}

### Logging Facilities
<hr style="width:100%;border-bottom:3px solid black;">

One goal for `compose.mk` is to enable program output that is clean, curated, and human-friendly on stderr, and machine-friendly on stdout.  There are a few features available in support of this.  In general `compose.mk` prefers make-targets over make-functions and macros, because targets are more reusable.[^2]  Logging is a special case though, and might use all 3.

#### Log Functions 
<hr style="width:95%;border-bottom:1px dashed black;">

First lets look at the **`log.*` functions** that are suitable for use from your project Makefile.  The following example demonstrates basic logging, logging with formatting, and trace-logging.  

```Makefile
{{open('demos/logging.mk','r').read().strip()}}
```

A few other things that are worth mentioning:

* **Logging always goes to stderr so that targets remain pipe-safe**, including the `log.json` output.
* **Log-messages have a prefix which is based on the call-depth**, which can help visually parse complex traces.
* See the `compose.mk` source for other information about formatting colors and glyphs.  

Tools for working with JSON are also discussed in more detail in the section on [Structured IO](#structured-io-basics).

#### File and Stream Previews
<hr style="width:95%;border-bottom:1px dashed black;">

Whether you're working on build processes, data-pipelines, or infrastructure deployments, it's convenient to have the ability to "preview" things like files, streams, or intermediate representations.  [Docs for compose.mk's built-in tool wrappers]({{mkdocs.site_relative_url}}/tool-overview/#other-wrappers) cover this topic also, but let's look at some more programmatic usage.

------------------------------------------

```Makefile
{{open('tests/tool-wrappers.sh','r').read().strip()}}
```
<br/>

#### Visual Dividers
<hr style="width:95%;border-bottom:1px dashed black;">

**Visually separating stages with some kind of output divider** is something that is nice to have to for otherwise messy output.  Here's an example of several different ways of using `io.print.div` to get labeled or timestamped dividers that are shown between clean/build/test stages.  

```Makefile
{{open('demos/section-dividers.mk','r').read().strip()}}
```

In the `build` task above, you can see one way to call `io.print.div` explicitly, which uses `${make}` as shorthand for "*the right way to call `make` recursively*".  As an equivalent, you can always use an invocation like `./compose.mk io.print.divider` instead, and this works from anywhere.  Inspecting usage from the command line:

{{macros.img_link("demo-io.gif", mkdocs, "90%")}}

-----------------------------------

Even though [`io.print.div`]({{mkdocs.site_relative_url}}/api/#ioprintdiv) detects terminal width, it isn't fancy otherwise.  A related utility is `io.gum.style`, which can print dividers with [charmbracelet/gum](https://github.com/charmbracelet/gum).  *If you have a local copy of `gum` then it is used, otherwise, we fall back to docker.*

{{macros.img_link("demo-gum.gif", mkdocs, "90%")}}

If you want to make extensive use of these kinds of banners, you can organize around [stages]({{mkdocs.site_relative_url}}/stages) to get them implicitly.  You can use figlet too, like this:

```bash
# or, ./compose.mk io.figlet/banner
$ label=banner ./compose.mk io.figlet

 ██                                                
░██                                                
░██       ██████   ███████  ███████   █████  ██████
░██████  ░░░░░░██ ░░██░░░██░░██░░░██ ██░░░██░░██░░█
░██░░░██  ███████  ░██  ░██ ░██  ░██░███████ ░██ ░ 
░██  ░██ ██░░░░██  ░██  ░██ ░██  ░██░██░░░░  ░██   
░██████ ░░████████ ███  ░██ ███  ░██░░██████░███   
░░░░░    ░░░░░░░░ ░░░   ░░ ░░░   ░░  ░░░░░░ ░░░    
```

To add color, you can use a context manager and any of the colors that `compose.mk` natively understands.

```bash 
./compose.mk io.with.color/red,io.figlet/banner
```

For other TUI-components like this that fall short of a full-blown interface,  see [these docs for stand-alone mode]({{mkdocs.site_relative_url}}/tool-overview). See also the [full documentation for all `io.*` targets]({{mkdocs.site_relative_url}}/api/#api-io)

