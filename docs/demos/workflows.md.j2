{% import 'macros/base.j2' as macros -%}{% import 'macros/site.j2' as site -%}

## Pipelining & Workflow Basics
<hr style="width:100%;border-bottom:3px solid black;">

We've previously met the [**`flux.*` target namespace**]({{mkdocs.site_relative_url}}/api#api-flux), and discussed how it [provides basic tooling for workflows]({{mkdocs.site_relative_url}}/standard-lib/#workflow-support).  

This demo builds on those ideas and introduces {{site.api_link('flux.pipeline',mkdocs=mkdocs,arg='targets')}} to describe a miniature ETL. For this exercise we'll also use idioms for [Structured IO]({{mkdocs.site_relative_url}}/standard-lib/#structured-input-output) and [Logging]({{mkdocs.site_relative_url}}/standard-lib/#logging-facilities) so that what we build is friendly reading for both people and machines.

### Miniature ETL
<hr style="width:100%;border-bottom:3px solid black;">

Consider the following Makefile for describing a miniature ETL:

{{site.embed_demo('demos/etl-json.mk', github=github)}}

Basically this works the way you'd expect, and we can execute the ETL end-to-end with `make etl`, or with error-handling using `make etl.safe`.  As a bonus, developers retain the ability to execute individual pipeline components or cleanup piecewise, or individually.  

One benefit of `flux.pipeline` is getting previews of the results at different stages.  Running the example so far looks like this:

{{macros.img_link("etl-json.png", mkdocs, "98%")}}

Despite appearances, this is actually pipe-safe: the final output of `{"stage":"loaded"}` is the only thing on stdout, the rest is stderr.

For related reading, see the API docs for {{site.api_link('flux.pipeline',mkdocs, arg='t1>,..<tn')}}.  The [platform lifecycle demo]({{mkdocs.site_relative_url}}/demos/platform) shows flow control with {{site.api_link('flux.pipe.fork',mkdocs,arg='target_list')}}

### Extending the Pipeline
<hr style="width:100%;border-bottom:3px solid black;">

Maybe any example passing around fake JSON looks tight and tidy, but.. it's really easy to extend this.  Let's sketch small changes that can actually turn this into an image pipeline, using docker idioms from `compose.mk` to leverage external tools.  

{{site.embed_demo('demos/etl-img.mk', github=github)}}

For more information, see the api docs for [`docker.run.image`]({{mkdocs.site_relative_url}}/api/#dockerrunimagearg) and the docs for [raw docker support]({{mkdocs.site_relative_url}}/vanilla-docker).

### Discussion 
<hr style="width:100%;border-bottom:3px solid black;">

It's a neat trick that `compose.mk` has some features that look like Luigi or Airflow if you squint, but of course it's not *really* made for ETLs. Actually `flux.*` is more similar in spirit to things like declarative pipelines in Jenkins[^1].  

!!! related_links "Related Links"
    * The [Workflow Rationale Docs]({{mkdocs.site_relative_url}}/standard-lib/#workflow-rationale) 
    * The [Platform Lifecycle Demo]({{mkdocs.site_relative_url}}/demos/platform).

### References
<hr style="width:100%;border-bottom:3px solid black;">

[^1]: [declarative pipelines in jenkins](https://www.jenkins.io/doc/book/pipeline/syntax/#declarative-pipeline)

<script>
document.addEventListener('DOMContentLoaded', function() {setTimeout(function() {
    addImageToHeader('miniature-etl','/{{mkdocs.config.site_name}}/img/list-check.svg')
    addImageToHeader('extending-the-pipeline','/{{mkdocs.config.site_name}}/img/list-check.svg')
    addImageToHeader('pipelining-workflow-basics','/{{mkdocs.config.site_name}}/img/basics.svg')
	addImageToHeader('discussion','/{{mkdocs.config.site_name}}/img/discussion.svg');
}, 100);});
</script>
