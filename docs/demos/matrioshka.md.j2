{% import 'macros.j2' as macros -%}

{{macros.img_link("mat.png", mkdocs, "6%",align="left")}}

## Embedded Containers & Data
<hr style="width:100%;border-bottom:3px solid black;">

Sometimes it's useful to declare **inlined containers and data** alongside the same automation that is making use of those containers.  You'll have to exercise some judgement about when and where that is a *good idea*, but as a few examples:

* Since tool containers tend to be small and change infrequently, being self-contained reduces change-related friction that you usually get with external files, external repositories, and external registries.
* Sometimes having nested containers or data is just a way of keeping demos or prototypes tight and small, because being self-contained is the most legible or instructive.  (Related, this is actually a pretty good format for a bug report / minimum reproducible example for some complex systems.)
* Being self-contained is also at least *correlated* with other nice things like stability and reproducibility.

This page is an index of related concrete examples that introduce idioms for embedding containers and data.  If you're more interested in motivations, theory, and patterns, then you might prefer to start [here]({{mkdocs.site_relative_url}}/matrioshka).

**Basic Examples** are all on this page.  Quick links: [Inlined docker files](#inlined-dockerfiles), [Extending inline docker files](#extending-inlined-dockerfiles), [Inlined compose files](#inlined-compose-files), [Passing inlined data structures](#passing-inlined-data-structures)

**Intermediate Examples** are bigger external pages.  Quick links:  The [Theorem Proving demo]({{mkdocs.site_relative_url}}/demos/lean) embeds a lean4 runtime, theorem, and code.  The [Custom Automation API demo]({{mkdocs.site_relative_url}}/demos/custom-automation-apis) wraps an Ansible runtime, then customizes it and exposes a different interface.  And the [Justfile demo]({{mkdocs.site_relative_url}}/demos/just) wraps a just-runner and a just-file, then customizes it and exposes a different interface.

**Advanced Examples** are hard to come by, because for bigger projects you'll have to stop embedding stuff!  However, [the makeception]({{mkdocs.site_relative_url}}/demos/makeception) demo might qualify, not based on length, but based on weirdness.

{#**Advanced Examples:**
1. [Matrioshka demo]({{mkdocs.site_relative_url}}/matrioshka#advanced-matrioshka-idioms)
### Demo Index
<hr style="width:100%;border-bottom:3px solid black;">

The rest of this page is dedicated to general discussion of matrioshka design and idioms, so that the demos can remain small and focused.
**This section indexes demos that might be categorized by reasonable people as "mad science".** Embedding or "inlining" data directly alongside automation like this isn't generally a good idea, but when you need it, you need it!
<hr style="width:95%;border-bottom:1px dashed black;">

#}

### Inlined Compose Files
<hr style="width:100%;border-bottom:3px solid black;">

```Makefile
{{open('demos/inlined-composefile.mk','r').read().strip()}}
```
{% include "demos/inlined-dockerfiles.md.j2"%}

### Extending Inlined Docker Files 
<hr style="width:100%;border-bottom:3px solid black;">

Inlined containers can actually be extended with other inlines, but notice again the `compose.mk:` prefix which is used as a repository.

```Makefile
{{open('demos/extend-inlined-dockerfile.mk','r').read().strip()}}
```

### Passing Inlined Data-Structures
<hr style="width:100%;border-bottom:3px solid black;">

*For the related topic of general templating support, see instead [this section of the polyglot docs]({{mkdocs.site_relative_url}}/demos/polyglots#templating-languages).*

Building on the [Custom Automation APIs demo]({{mkdocs.site_relative_url}}/demos/custom-automation-api), let's embed an ansible playbook, pass *that* into an embeddded container.

```Makefile
{{open('demos/ansible-playbook.mk','r').read().strip()}}
```

<hr style="width:100%;border-bottom:3px solid black;">
