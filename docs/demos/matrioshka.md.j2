{% import 'macros.j2' as macros -%}

## Embedded Containers & Data
<hr style="width:100%;border-bottom:3px solid black;">

!!! danger "<small>Reasonable people might consider this stuff to be mad science.</small>"
    See [this section]({{mkdocs.site_relative_url}}/matrioshka/#has-science-gone-too-far) for more discussion on that point, and if you're more interested in patterns and theory, then you might prefer to start [here]({{mkdocs.site_relative_url}}/matrioshka).

Sometimes it's useful to declare **inlined containers and data** alongside the same automation that is making use of those containers.  You'll have to exercise some judgement about when and where that is a *good idea*, but since tool containers tend to be small and change infrequently, **being self-contained reduces change-related friction and context-switching** that's associated with external repositories, external registries, and external files.

**Basic Examples** are all on this page.  Quick links: [Inlined docker files](#inlined-dockerfiles), [Extending inline docker files](#extending-inlined-dockerfiles), [Inlined compose files](#inlined-compose-files), [Passing inlined data structures](#passing-inlined-data-structures)

**Intermediate Examples** are bigger external pages.  Quick links: The [Theorem Proving demo]({{mkdocs.site_relative_url}}/demos/lean) embeds a lean4 runtime, theorem, and code.  The [Custom Automation API demo]({{mkdocs.site_relative_url}}/demos/custom-automation-apis) wraps an Ansible runtime, then customizes it and exposes a different interface.  And the [Justfile demo]({{mkdocs.site_relative_url}}/demos/just) wraps a just-runner and a just-file, then customizes it and exposes a different interface.

**Advanced Examples** are hard to come by, because for bigger projects you'll have to stop embedding stuff!  However, [the makeception]({{mkdocs.site_relative_url}}/demos/makeception) demo might qualify, not based on length but based on weirdness.

### Inlined Compose Files
<hr style="width:100%;border-bottom:3px solid black;">

{{macros.embed_demo('demos/inlined-composefile.mk', 
    github=github, 
    bottom_right=macros.link_mirror(
        'demos/cmk/inlined-composefile.cmk',
        base=mkdocs.site_relative_url+"/compiler#"))}}

{% include "demos/inlined-dockerfiles.md.j2"%}

### Extending Inlined Dockerfiles 
<hr style="width:100%;border-bottom:3px solid black;">

Inlined containers can actually be extended with other inlines, but notice again the `compose.mk:` prefix which is used as a repository.

{{macros.embed_demo('demos/extend-inlined-dockerfile.mk', github=github)}}

### Passing Inlined Data-Structures
<hr style="width:100%;border-bottom:3px solid black;">

*For the related topic of general templating support, see instead [this section of the polyglot docs]({{mkdocs.site_relative_url}}/demos/polyglots#templating-languages).*

Building on the [Custom Automation APIs demo]({{mkdocs.site_relative_url}}/demos/custom-automation-api), let's embed an ansible playbook, then pass it into an embeddded container.

{{macros.embed_demo('demos/ansible-playbook.mk', github=github, extra_label='<a href='+mkdocs.site_relative_url+'/demos/custom-automation-apis/>Related Demo</a>')}}

<hr style="width:100%;border-bottom:3px solid black;">

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Wait for MkDocs to fully render the page including ToC
    setTimeout(function() {
        const heading = document.getElementById('embedded-containers-data');
        const img = document.createElement('img');
        img.style.height = '2em'; img.style.verticalAlign = 'bottom';
        img.src = '../../img/mat.png'; 
        heading.insertBefore(img, heading.firstChild);
        img.style.marginRight = '10px';
        //img.style.marginLeft = '10px';
        //heading.appendChild(img);
    }, 100); // Small delay to ensure ToC is already processed
});
</script>