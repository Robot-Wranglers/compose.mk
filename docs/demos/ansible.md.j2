{% import 'macros.j2' as macros -%}

## Custom Automation APIs

### Introduction

<hr style="width:100%;border-bottom:3px solid black;">

This demo describes one way to very quickly expose custom automation APIs using `compose.mk`.  *What does that even mean?*

When it comes to automation, combining different tools that might be in different containers together is part of the job, but at the end of the day you always want a *coherent vocabulary of verbs that operate on your domain.*  

Those verbs might just be the classic *build/clean/test*, but even then you're often orchestrating across different containers. And your vocabulary might look more like *build/deploy*, or if things get complicated enough, your vocabulary might develop more object-oriented instructions, like *queue.stop* and *cluster.create*.  

So that's an automation API in broad strokes, and `compose.mk` has the tools to build it.

Really, `compose.mk` is a foundation to build on, and it doesn't make assumptions about your domain.  But combining `compose.mk` with your own toolkit and **building** a new vocabulary is where it really starts to shine.  For a deep dive into a much larger example of this where `compose.mk` is used for orchestrating kubernetes tools, see the [sibling project for k8s-tools]({{jinja.vars.k8stools_docs_url}}).

**For our purposes here, we'll look at a concrete use-case that's much smaller, so let's talk about hacking Ansible.**

### Hijacking Ansible

<hr style="width:100%;border-bottom:3px solid black;">

**The problem:** Ansible is neat for lots of stuff, but it comes with a lot of baggage.  Depending on how you're using it.. you'll need a playbook, maybe a config file and an inventory file, not to mention a python stack, and you'll need the ansible version itself pinned.  It's a whole stack and it has to be layed out in a certain way; command line invocations are long, tedious, and easy to get wrong.  Simple stuff can be a lot of drama, especially if you're trying to make sure it's reproducible. And things gets worse if you need to run it from different contexts, or if you're trying to keep this work small and self-contained.  

As an exercise.. let's look at what `compose.mk` can bring to adress some of that.  


### Map Ansible Modules to Targets

<hr style="width:100%;border-bottom:3px solid black;">

{#<hr style="width:95%;border-bottom:1px dashed black;">#}

[Ansible's adhoc mode](#) gives some direct access to ansible-modules and lets you skip a playbook.  For our first trick, we'll try to expose access to those modules.  Here are the basic goals:

1. No ansible-dependency on our host, of course we'll use docker
1. Full access to ansible-modules via the command line 
1. Full access to ansible-modules in `make` world, for use as composable prerequisite targets, etc
1. Ensure that output is *always* JSON, in case we want to use it downstream

Typically, you would want to begin by sketching out an ansible container inside a docker-compose file, then use `compose.import` to [autogenerate related targets]({{mkdocs.site_relative_url}}/bridge).  Just to keep things simple though and to demonstrate [raw docker support in compose.mk]({{mkdocs.site_relative_url}}/vanilla-docker) at the same time, we'll embed the ansible container directly.

Without further delay, here's some well-commented code that achieves the goals.


<hr style="width:95%;border-bottom:1px dashed black;">

``` Makefile
{{open('demos/ansible-adhoc.mk','r').read().strip()}}
```

<hr style="width:95%;border-bottom:1px dashed black;">

Not exactly *beautiful* to read, but the implementation is small and this is neat.  

As mentioned above, `make ansible.adhoc/ping` works as expected to call the [ping module](#), and to call the [docker_host_info](#) module with arguments, we can write `echo images=yes | make ansible.adhoc.args/docker_host_info`.  The argument-passing is awkward for *people*, but it supports JSON, so this is already fairly usable from/for other automation. For common use-cases, you just make a more friendly alias, as is done with `list_images` above. 

As an aside, the eagle-eyed reader will have noticed that `docker_host_info` actually returns data, i.e. it is using the **host docker socket**, because under the hood, `docker.run` shares it automatically.*  So effectively the ansible container can orchestrate tasks on the host, even though the host doesn't have ansible.  By default [`docker.run`](#) also shares the working directory.

<hr style="width:100%;border-bottom:3px solid black;">

### Discussion

<hr style="width:100%;border-bottom:3px solid black;">

So anyway, the examples so far are contrived, and the technique itself is more important than the involvement of ansible.  But actually the result so far is pretty powerful.  Ansible has lots of random utilities, but previously the friction involved to actually use them might have felt daunting.  But our new targets now make it easy to pull in a discrete chunk of ansible very quickly without having to ansible all the things.  

As a more practical example, one can imagine raiding the [kubernetes.core.k8s module](https://docs.ansible.com/ansible/latest/collections/kubernetes/core/k8s_module.html) for useful stuff:

```Makefile

cluster.purge:
	echo namespace=testing kind=Deployment delete_all=true \
	| make ansible.adhoc.args/kubernetes.core.k8s
```

This is what we were really aiming at originally: a verby high-level and domain-specific API, with tasks accessible individually or in groups from CLI, or available to programmatically chain together as DAGs.

**Where this really gets interesting is larger projects.**  Suppose for example that your `cluster.create` operation is using a terraform container, and you work at a place that mostly writes golang code.  Whereas using `ansible` previously wasn't a good *cultural fit*, once you strip away the detail and expose an interface as we've seen here, it doesn't feel like as much of a commitment to a whole ecosystem.  That makes it easier to combine tools.  

Although `Makefile` isn't anyone's favorite programming language, let's notice how the `cluster.purge` target above is very effective at reducing friction for new contributions.  Ignoring the *implementation* and focusing on the custom automation API that we're exposing.. we're talking about one line in one file now and it's reasonably accessible to devops, engineers, and data-science. If you're looking at just the `cluster.purge` operation, then you might say the list of topics that are safe to ignore now includes at least *yaml, python, pip, docker*, and arguably includes ansible and kubernetes!

<hr style="width:100%;border-bottom:3px solid black;">

