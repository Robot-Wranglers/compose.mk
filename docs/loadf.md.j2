{% import 'macros.j2' as macros -%}

## Loading Compose Files
<hr style="width:100%;border-bottom:3px solid black;">

For simple use-cases where you have a compose-file, and want some of the `compose.mk` features, but you **don't have a project Makefile**, it's possible to skip some of the steps in the [usual integration]({{mkdocs.site_relative_url}}/bridge) by letting `loadf` generate integration for you just in time.

The general usage looks like this:

```bash  {.cli_example} 
$ ./compose.mk loadf <path_to_compose_file> <other_instructions>
```
<br/>

### Basic Usage
<hr style="width:100%;border-bottom:3px solid black;">

If no additional downstream targets are passed, the default behaviour is to open a shell for each tool container [using the TUI]({{mkdocs.site_relative_url}}/embedded-tui).  Here's what it looks like:

{{macros.img_link("loadf-1.gif", mkdocs)}}

See instead [the selector docs]({{mkdocs.site_relative_url}}/selector) for interactively selecting a container instead of opening all of them. 

### Arbitrary Downstream Targets
<hr style="width:100%;border-bottom:3px solid black;">

Using `loadf` effectively runs [`compose.import`]({{mkdocs.site_relative_url}}/bridge) *for you* so that afterwards you can use any of the other targets documented as [part of the bridge]({{mkdocs.site_relative_url}}/bridge/#target-scaffolding) or the [static targets]({{mkdocs.site_relative_url}}/api).

This means that `loadf` doesn't really need to involve the TUI at all.  The example below is using the [`<svc_name>.get_shell`]({{mkdocs.site_relative_url}}/bridge/#svc_namespecial) target:

{{macros.img_link("loadf-no-tui.png", mkdocs)}}

Note that despite all the output **this is pipe-safe**, in case the commands involved might return JSON for downstream parsing, etc.  

---------------------------------------

As another example, you can use the [`<svc_name>.pipe` target]({{mkdocs.site_relative_url}}/bridge/#svc_nameshellpipe) to push data *into* a container with a command like this:

```bash  {.cli_example .line-numbers}

$ echo hostname | ./compose.mk loadf \
    demos/data/docker-compose.yml debian.shell.pipe
```
```bash {.cli_output}
debian
```

Ultimately though, using the TUI for quick and convenient inspection is probably the main use case.  Here's a few more examples along those lines:

```bash  {.cli_example}

# Opens 3 panes with container-shells
$ ./compose.mk loadf demos/data/docker-compose.yml \
       tux.open.service_shells/debian,alpine,debian

# Equivalently, using lower-level generic targets
$ ./compose.mk loadf demos/data/docker-compose.yml \
       tux.open/debian.shell,alpine.shell,debian.shell

# Opens 2 panes of bash-shells for the TUI container itself
$ ./compose.mk loadf demos/data/docker-compose.yml \
       tux.open/io.bash,io.bash
```
!!! tip "Related Links"
    See also the [Embedded TUI docs]({{mkdocs.site_relative_url}}/embedded-tui/#zero-config-tuis) for other examples that are using `loadf`, discussion of default pane layouts, etc.

<hr style="width:100%;border-bottom:3px solid black;">