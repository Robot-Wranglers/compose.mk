{% import 'macros.j2' as macros -%}

## Signals and Supervisors
<hr style="width:100%;border-bottom:3px solid black;">

Every direct invocation of `compose.mk` optionally gets a "supervisor" process that allows for enhanced use (abuse?) of POSIX signals. Amongst other use-cases, you can use this pattern to yield control to another process in the middle of target-processing, or to implement entrance/exit handlers for `make`, in `make`.

{#{macros.img_link("escher-still-life.png", mkdocs, width="50%", align='center')}#}

**Working with signals (or understanding them) is not required for most use-cases of `compose.mk`,** especially if you're using it as a library.   But [for some tool mode invocations]({{mkdocs.site_relative_url}}/tool-overview/#tool-wrappers), supervisors and signals might be involved implicitly.  Signals also enable certain experimental features, and in principle the supervisor can be extended with new entry/exit hooks.

Power users might be interested to understand the caveats and limitations around this, and anyone looking to work deeply on `compose.mk` itself might need to grok the implementation.

### Background & Motivation
<hr style="width:100%;border-bottom:3px solid black;">

Without [forking make](https://remake.readthedocs.io/en/latest/), there's no simple method to get hooks into the default way that it handles interrupts and signals.  But why would you want to anyway?  Most of the time this occurs to people [it's about cleanup](https://www.gnu.org/software/make/manual/html_node/Interrupts.html), but `compose.mk` doesn't exactly look like traditional use-cases.  

For `compose.mk` specifically, signals come up when we need to stop `make` from processing the command line input, and pass control over to a new process.  But why?  Well, short-circuiting the default CLI option parsing for `make` *really useful*.  Especially since `compose.mk` allows us to "wrap" lots of containerized tools, we want to be able to proxy arguments over to those tools without `make` being greedy about parsing everything.  

Here's a few typical examples of why you might want **individual targets to essentially be able to consume the rest of the command line.**

* The [help command]({{mkdocs.site_relative_url}}/cli-help) has an optional 2nd argument, a target, which must **not** be parsed by `make` because that would actually execute the target!  
* The [`loadf` command]({{mkdocs.site_relative_url}}/loadf) is similar: the 2nd argument, a filename, must **not** be parsed as a Makefile target because no such target exists.
*  The [wrappers for `jq` and `jb`]({{mkdocs.site_relative_url}}/tool-overview/#proxy-wrappers) are also examples where we need to read the whole command-line.

```bash
# Several example invocations where arguments are NOT targets.
$ ./compose.mk help docker.image.run
$ ./compose.mk loadf demos/data/docker-compose.yml
$ echo '{"foo":"bar"}' | ./compose.mk jq .foo
$ ./compose.mk jb foo=bar
```

<br/>

### Inheritance & Interpreters
<hr style="width:100%;border-bottom:3px solid black;">

Projects that are extending `compose.mk` might be interested in *inheriting* the capabilities for signals and supervisors.  The simplest reason you might want to do this is just for the sake of bringing [compose.mk-style CLI help]({{mkdocs.site_relative_url}}) to your own project, *i.e. targets that actually support positional arguments,* but [the advanced examples](#advanced-examples) on this page hint at other possibilities.  

For [technical reasons](#implementation-details), there's unfortunately no way to inherit signal capabilities by simply using `include compose.mk` from your project Makefiles.  There is however a work-around if you're willing to **setup `compose.mk` itself as your interpreter**.  (For information about getting an interpreter *and* a transpiler/preprocessor, see instead [the compiler docs]({{mkdocs.site_relative_url}}/compiler))

This pattern is an advanced topic, and while using it is surprisingly stable and portable, the semantics of it are strange enough that the whole thing should probably be considered experimental.

#### Positional Arguments & Yield
<hr style="width:95%;border-bottom:1px dashed black;">

Looking at a few examples of this will be useful context, so let's start with something simple.  

To demonstrate short-circuiting the default command line processing of `make`, we'll try to create a clone of the `ls` command.  In the code, the differences start right away.  See the shebang at the top of the following file which uses {{macros.api_link('mk.interpret',mkdocs)}} ?

```Makefile
{{open('demos/interpreter.mk').read()}}
```

The next extremely magical line is the call to `mk.yield`, where the argument is the command line that you want to *yield execution to*.

We yield to `ls $${MAKE_CLI#*ls}`, where the right side expands to "the full command line, *after* the word `ls`".  [^4]

At this point as long as the file is executable, then `./demos/interpreter.mk ls /` works as expected.  But the body of `__main__` demonstrates something that might be surprising, which is that `mk.yield` really *does* drastically change the rest of program flow control afterwards.

We can skip the usage of `compose.mk` as an interpreter by invoking the code as `make -f demos/interpreter.mk ls /`, which *also works*, but includes a `Supervisor not found` message at the end.  Meanwhile, whereas `./demos/interpreter.mk` runs `__main__` and exits early with success, `make -f ./demos/interpreter.mk` fails because it does not exit early.

A subtle but **potentially serious issue** with this approach is that `./demos/interpreter.mk ls -la` works as expected, but `./demos/interpreter.mk ls --help` actually returns *help for make* and **not** *help for ls*.. implying that our intent to proxy the "rest" of the command line still has some limitations, and it actually depends on the content of that command line.  

If you're only interested in proxy for **positional arguments** then this won't matter, meanwhile **option-proxy** works in some cases but must always be tested carefully.

#### Generic Option Proxy
<hr style="width:95%;border-bottom:1px dashed black;">

The end of the last section hints at a basic problem with convenient but naive option-proxy.  What if we want `ls --help` to work, or to put it another way: **how can we stop make from eating our argv?**

The solution for this is to use the *end of options* hint, aka '<main_cmd> -- <other_stuff>'[^1], which `compose.mk` has some built-in support for using the `MAKE_CLI_EXTRA` variable.[^2]

```makefile
{{open('demos/interpreter-2.mk').read()}}
```

As seen above, this does require that we sacrifice the convenience of a really direct invocation.  But now `./demos/interpreter.mk ls -- --help` actually returns help for `ls` instead of help for `make`.  

This works much more reliably for options compared with the last approach, **but still has known issues**.  To see this, try passing optional args with and without `=`, i.e. `./demos/interpreter.mk ls -- --width=45` will break whereas `./demos/interpreter.mk ls -- --width 45` does not. [^3] 

#### Advanced Examples
<hr style="width:95%;border-bottom:1px dashed black;">

Of course, no one really cares about making an `ls` clone!  But besides the simple use-cases with targets that might want to accept pos-args and halt further execution, there are some other applications.

The example below demonstrates an embedded python-script that we'll run inside a container, and uses real option parsing.  

```makefile
{{open('demos/interpreter-3.mk').read()}}
```

Above we use `$(call mk.yield)` with no arguments, which is equivalent to `$(call mk.yield, true)`, i.e. just stopping CLI parsing and exiting immediately. This is often sufficient and has the correct exit status, because if the line before it should fail, execution will stop anyway.

### Pre & Post Hooks 
<hr style="width:100%;border-bottom:3px solid black;">

If you're using the interpreter as seen in the previous examples, you'll also **automatically be able to use pre and post hooks for every target that runs via the command line.**  Here's a simple example to illustrate:

```makefile
{{open('demos/interpreter-4.mk').read()}}
```

Running the code above works the way you'd expect:

```./demos/interpreter-4.mk main_target

hello pre-hook
hello main
hello post-hook
```

Cool, so we can get pre and post effects with no explicit plumbing.  This is named-based with post-fixes as seen above.  This is partly just a style choice that can make certain code more readable, but it does also make possible a certain interesting kind of code reuse, because many targets may wish to share the *same* pre-conditions or post-conditions.  This works because there's no need to define an explicit target body for the hooks actually, and you can just treat `my.target.pre: common.precondition` as label  This approach is similar to function decorators in python, or lightweight "aspect oriented" programming.

It's very important to understand the limitation that was hinted at earlier though.  What does it mean that hooks work for "*every target that via command line*" ? To put this in other words, **hooks are only fired when the interpreter is used directly,** i.e. recursive calls via `${make}` or similar will not execute them!  This makes the feature pretty useful for standalone tools, and less useful for libraries.

Hooks are enabled by default since they don't affect peformance much, but it's possible they might conflict with existing naming conventions or similar.  To override this, set `CMK_DISABLE_HOOKS=1`.

### At-Exit Handlers
<hr style="width:100%;border-bottom:3px solid black;">

*Note: this is experimental and not extensively tested.* 

To setup one or more exit handlers, try using the `CMK_AT_EXIT_TARGETS` environment variable with space-separated target names.  This should run even if `make` dies for any reason and even if it is killed, but cannot run if the wrapper process is killed  (see the [implementation details](#implementation)).  This is called whenever `mk.supervisor.exit` is called, which has the usual caveats that **you must be using a interpreter-style invocation,** and not running via `make -f ...`!

This is If there are 

### Implementation
<hr style="width:100%;border-bottom:3px solid black;">

If you're already very familiar with `make` and looking over the rest of this page, you might be wondering how this kind of semi-magical behavior can be achieved.   And since the answer to that question is frankly kind of ridiculous, this should probably be considered experimental =)  *With that sternly worded warning out of the way..*

Signals and supervisors are implemented using a shebang hack[^5] and a polyglot[^6], whereby `compose.mk` is simultaneously a Makefile, a Makefile library, *and* a bash script.  The way this works is as follows:

------------------------------

The bash script invokes `make`, but wraps it to catch any signals that are thrown.  After throwing a supported signal causes `make` to exit, bash catches, and then passes the code for the caught signal back to *another* invocation of `make` for an exit handler.

------------------------

**As a consequence of this, signals can only be handled when `compose.mk` is invoked directly,** i.e. with `./compose.mk ...`, and cannot work for `make -f compose.mk`.  

The [pre/post hooks](#pre-post-hooks) have exactly the same limitation, but a different implementation.  Since the bash wrapper-script ultimately controls the initial invocation of `make`, it's possible to dynamically inject targets *between* any targets that are initially declared.

{#So note that **project Makefile's that are using `include compose.mk` cannot currently inherit this ability.**  

Note that while passing control over to a completely different process like this seems to *actually work* for both Linux and MacOS, this is still bad form.  In particular, complex argument passing might be misquoted, or exit codes may not be reliable.
#}

### For Developers
<hr style="width:100%;border-bottom:3px solid black;">

All targets related to signals/supervisors can be found under the `mk.interrupt` and `mk.super` namespaces, respectively.  

{{macros.api_link_many('mk.super', mkdocs)}}
{{macros.api_link_many('mk.interrupt', mkdocs)}}

Targets above are for low-level internal use, and even hacking directly on `compose.mk` source probably won't require editing them.  To implement a new [proxy-wrapper]({{mkdocs.site_relative_url}}/tool-overview/#proxy-wrappers), use `mk.yield`.  Here's how you'd give `compose.mk` a new proxy-wrapper for the `ls` command:

```Makefile 
# compose.mk src 
ls:
	$(call mk.yield, ls $${MAKE_CLI#*ls})
```
<br/>
<hr style="width:100%;border-bottom:3px solid black;">

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Wait for MkDocs to fully render the page including ToC
    setTimeout(function() {
        const heading = document.getElementById('signals-and-supervisors');
        const img = document.createElement('img');
        img.style.height = '2em'; img.style.verticalAlign = 'middle';
        img.src = '../img/makefile.png'; 
        heading.insertBefore(img, heading.firstChild);
        //img.style.marginRight = '10px';
        //heading.appendChild(img);
    }, 100); // Small delay to ensure ToC is already processed
});
</script>

[^1]: For people that have seen ' -- ' usage before but don't really know how it works, this isn't part of the shell itself.  It's a convention that is *almost* a guarantee, assuming [POSIX compliant getopt](https://pubs.opengroup.org/onlinepubs/9699919799.2018edition/functions/getopt.html)
[^2]: Determining the full CLI that invoked `make` is actually pretty hard, especially if you want portability.  If you've been wondering about `procps` and `procps-ng` package references that are scattered around and [recommended for dispatch]({{mkdocs.site_relative_url}}/integration/#docker-compose-integration), this is the reason.
[^3]: Issues with proxying `--long-opt=..` is probably a bug and not a *fundamental* limitation, but this whole topic is so obscure it's probably not worth fixing =P
[^4]: The incantation `${MAKE_CLI#*ls}` uses [bash parameter expansion](https://www.gnu.org/software/bash/manual/html_node/Shell-Parameter-Expansion.html) and the special variable `MAKE_CLI` that's provided by `compose.mk`.
[^5]: https://en.wikipedia.org/wiki/Shebang_(Unix)
[^6]: https://en.wikipedia.org/wiki/Polyglot_(computing)
