{% import 'macros.j2' as macros -%}

## Container Dispatch
<hr style="width:100%;border-bottom:3px solid black;">

Having [imported services with `compose.import`]({{mkdocs.site_relative_url}}/bridge), let's look at an idiom that allows us to dispatch tasks (i.e. make-targets) into those tool containers.  

{{macros.img_link("escher-reptiles.jpg", mkdocs, width="70%", align='center')}}

Later in this page, we'll get into more details about [how/when container dispatch is useful](#but-why), and a [typical setup](#compose-file-boilerplate)  with `docker-compose.yml` that supports it.  For now, let's start with what the idiom looks like and how it's used.

### Dispatch Basics
<hr style="width:100%;border-bottom:3px solid black;">

**The dispatch idiom is simply a way of binding an existing task to an existing container.**

To illustrate the idea, consider the following project Makefile:

```Makefile
{{open('demos/container-dispatch.mk','r').read().strip()}}
```

---------------

Calling the top-level `demo` target looks something like this:

{{macros.img_link("demo-dispatch.gif", mkdocs)}}

*What just happened?*  

You could say that what we have so far is a kind of notation where the following are roughly equivalent:

```bash
# pithy invocation with compose.mk
$ ./demo

# the verbose alternative invocation
$ docker compose -f docker-compose.yml \
    run --entrypoint bash debian -c "make self.demo"
```

Maybe it's not obvious yet, so it's worth noticing that this is already **much** cleaner and more composable than the alternative in pure bash, where you get lots of disconnected automation scripts that are littered with lots of `docker run ...` statements.  In fact, this is pretty similar to [`agent { docker { .. } }` in Jenkins Pipelines](https://www.jenkins.io/doc/book/pipeline/docker/), but it's significantly more portable, and arguably more readable.

### Namespace-Style Dispatch
<hr style="width:100%;border-bottom:3px solid black;">

The example above uses the simplest dispatch style, but we plan to stay organized even if we're building lots of targets with lots of containers across [maybe several compose-files]({{mkdocs.site_relative_url}}/bridge/#other-import-statements). 

In such cases name-collisions might be inevitable, and you'll want fine-grained controls over namespacing to get something closer to an "absolute path" for the dispatch mechanics.  The next example is equivalent to the first, and begins to shed light on how the [`compose.import` macro arguments]({{mkdocs.site_relative_url}}/bridge/#other-import-statements) can be used to create user-defined [syntactic sugar](https://en.wikipedia.org/wiki/Syntactic_sugar).

```Makefile
{{open('demos/container-dispatch-2.mk','r').read().strip()}}
```

Similar to "private" targets with a `self.*` naming convention, using a blocky unicode symbol like `â–°` isn't *actually* required, and of course you can call your namespace anything you want.  There's a few reasons this weird looking style is a good idea though, and docs and demos will stick to it as a convenient naming convention. 

1. *Sugar for* [`<svc_name>.dispatch/<dispatch_target>`]({{mkdocs.site_relative_url}}/bridge/#svc_namedispatch) *should be shortened* (not longer than the syntax it's replacing)
1. *Sugar should be visually very easy to parse*, and blocky unicode symbols qualify while also making it very clear this is a specific new kind of idiom.

This convention also has a more subtle property that it's *hard to use from the command line*, but *easy to use from file that already has several such instances*, and **sometimes this is a feature**.  

If your targets *that actually run inside containers* are frequently used from the top-level.. that's a good indication that it's actually **a project-level verb that's important enough to deserve an aliased entrypoint**.

--------------------------------

Putting it together, imagine that your project uses so many tool containers that it becomes useful to separate them into different "tool boxes" by using different compose files.  By using `compose.import.as`, we can import to a namespace *without* cluttering the root.

```Makefile
{{open('demos/container-dispatch-3.mk','r').read().strip()}}
```

This way of arranging things makes it clear that there are a few distinct toolboxes at play, and that while you can always call things like `self.docs.gen` directly for testing, the syntax helps make it clear that your host isn't actually guaranteed to have all the tools involved.

### One-to-Many Dispatch
<hr style="width:100%;border-bottom:3px solid black;">

Let's add another target to our project Makefile, demonstrating dispatching one target to multiple containers:

```Makefile
{{open('demos/double-dispatch.mk','r').read().strip()}}
```

Again, the *`self`* prefix and the `â–°/` namespace is just a convention, you can see discussion in the previous section.  The above looks pretty tidy though, and hopefully this helps to illustrate how the target / container / callback association works.  Running `demo.double.dispatch` looks like this:

{{macros.img_link("demo.double.dispatch.gif", mkdocs)}}

Meanwhile, the equivalent-but-expanded pure bash version below is getting cluttered.  Eagle-eyed readers will note that even the verbose version is *actually abbreviated*, because this doesn't mention [the volume-mount necessary for tool containers to get at project files]({{mkdocs.site_relative_url}}/raw-docker/#tool-container-defaults).

```bash
# clean, simple invocation with compose.mk
$ ./demos/double-dispatch.mk

# verbose, fragile alternative
$ docker compose -f docker-compose.yml \
    run --entrypoint bash debian -c "make self.demo" \
  && docker compose -f docker-compose.yml \
    run --entrypoint bash alpine -c "make self.demo"
```

---------------------------

### Other Kinds of Dispatch
<hr style="width:100%;border-bottom:3px solid black;">

So far we've just looked at using dispatch for [imported tool containers]({{mkdocs.site_relative_url}}/bridge) that come from docker compose files.  Target dispatch also works with [stock-images]({{mkdocs.site_relative_url}}/raw-docker/#dispatch-tasks-in-containers), [inlined containers]({{mkdocs.site_relative_url}}/demos/matrioshka/#inlined-dockerfile), [inlined compose files]({{mkdocs.site_relative_url}}/demos/matrioshka/#inlined-compose-files),.

---------------------------

So that's container dispatch.  **This simple pattern for dispatching targets in containers is one of the main features of `compose.mk` as a library, and it's surprisingly powerful.**   

From here, if you just want to get started, you might want to skip to more detailed docs on the [arguments for the `compose.import` macro]({{mkdocs.site_relative_url}}/bridge/#import-macro-arguments) , or [the dispatch syntax/semantics](#dispatch-syntaxsemantics), or [the docker-compose.yml boilerplate that supports dispatch](#compose-file-boilerplate).  

On the other hand, if you're still wondering why you should care, check out the [commentary at the end](#but-why) of this page.

### Compose File Boilerplate
<hr style="width:100%;border-bottom:3px solid black;">

In practice the containers you use might be already compatible with the dispatch idiom, but if they are slim or you are starting from scratch, perhaps not.  

Below you can see a typical example of a compose file that supports dispatch, leaning more towards pedantic than minimal.  See the [integration docs]({{mkdocs.site_relative_url}}/integration/#docker-compose-integration) for more detailed discussion, 

```yaml
{{open('demos/data/docker-compose.yml','r').read()}}
```
### But Why? ðŸ¤”
<hr style="width:100%;border-bottom:3px solid black;">

Having introduced what the dispatch idiom looks like and what it does, let's talk briefly about what it means.  

This is probably a jailbreak moment for your automation!  Think about it: **Most of the ways that we use to *decouple* tasks from their execution environment actually cause our tasks to be *tightly coupled* to some platform instead**.  That's a frustrating trade-off and a huge barrier to entry if you're just trying to write/run code.  And it's not just CI/CD platforms like Jenkins and Github-- it also happens with platforms like Airflow, ArgoWF, and notebooks.  These platforms are all great at what they do, but we shouldn't need them every time we just want to decouple tasks from runtimes or express DAGs.  And if you want to use a platform later down the line, then your platform will be as happy to run `make` as your laptop is.  

Another thing that we can *optionally* decouple from is **excessive use of external repos and registries for small customizations**.  It's always a pain to get pulled into a loop like *visit a separate tool-container-repository, make a change and ship an update, back to the other repository, pull the tool down, see it still needs changes,..*

**Besides decoupling, arranging tasks this way tends to promote reusability and composition.**  As a rule, the more your automation is isolated into weird silos like notebooks and Jenkinsfiles, the more unruly that automation becomes.  *Is your automation growing wild copy-pasta, and turning into an ugly monolithic heap that only runs to top-to-bottom and has lots of side-effects?*  Much nicer to have discrete tasks that you can still run individually, yet quickly compose into DAGs of tasks, or DAGs of DAGs.  When you're more free from platforms and actually iterating on code in a read/write/run cycle more often, changes are easier and testing happens more continuously.


{#
Even without the more exotic features of `compose.mk`, it's worth mentioning that vanilla `make` has many under-appreciated capabilities over bash.  For example, did you know it supports ansible-style dry-runs [via --reconn](https://www.gnu.org/software/make/manual/html_node/Instead-of-Execution.html) and also parallel execution [with `make --jobs`](https://www.gnu.org/software/make/manual/make.html#Parallel-Execution)? 

* [Multiple compose files are supported](), and a virtually unlimited number of tool containers.
But where `compose.mk` really starts to shines isin is combining `compose.mk` with some docker-compose file the real magic happens when you combine `make`, `compose.mk`, `docker`,[workflow support]

### Dispatch Syntax/Semantics
<hr style="width:100%;border-bottom:3px solid black;">

Let's look at the container-dispatch example in more detail.  This isn't a programming language you've never seen before, it's just a (legal) Makefile that uses unicode symbols in some of the targets.  

```Makefile
# project Makefile (make sure you have real tabs, not spaces)

include compose.mk
$(eval $(call compose.import.generic, â–°, TRUE, docker-compose.yml))

# A target that runs stuff inside the `debian` container, runs from host using `make demo`
demo: â–°/debian/self.demo

# Dispatching 1 target to 2 containers looks like this
demo.both: â–°/debian/self.demo â–°/alpine/self.demo

# Displays platform info to show where target is running.
self.demo:
	source /etc/os-release && printf "$${PRETTY_NAME}\n"
	uname -n -v
```

The suggested defaults here will annoy some people, but the syntax is configurable, and this hopefully won't collide with existing file paths or targets.  Using the *`self`* prefix is just a convention that you can change, but having some way to guard the target from accidental execution on the host is a good idea.  

This decorator-inspired syntax is also creating a convention similar to the idea of private methods: *`self`* hopefully implies internal/private, and it's not easy to type the weird characters at the command line.  So users likely won't think to call anything except `make demo`.  For people reading the code, the visual hints make it easy to understand what's at the top-level.  Tightening it up can help to make it clear that this is sort of a logical block:

```Makefile

# project Makefile (make sure you have real tabs, not spaces)
include compose.mk
$(eval $(call compose.import.generic, â–°, TRUE, docker-compose.yml))

# Two top-level "public" targets, dispatching 1 "private" target into groups of 1 or more containers
demo: â–°/debian/self.demo
demo.both: â–°/debian/self.demo â–°/alpine/self.demo
self.demo:
	source /etc/os-release && printf "$${PRETTY_NAME}\n"
	uname -n -v
```

But what about the semantics?  In this example, the user-facing `demo` target depends on `â–°/debian/demo`, which isn't really a target as much as a declaration.  The declaration means the *private* target `self.demo`, will be executed inside the `debian` container that the compose file defines.  *Crucially, the `self.demo` target can use tools the host doesn't have, stuff that's only available in the tool container.*  

Look, no `docker run ..` clutter littered everywhere!  It's still kind of a weird CI/CD DSL, but the conventions are simple, it's agnostic about your CI backend, it is relatively frictionless, and there is a clean separation between automation / container specifications.

Under the hood, dispatch is implemented by building on the [default targets that are provided by the bridge](({{mkdocs.site_relative_url}}/bridge).
#}
