{% import 'macros/base.j2' as macros -%}{% import 'macros/site.j2' as site -%}

## Import Services from Compose
<hr style="width:100%;border-bottom:3px solid black;">

One of the main features for `compose.mk` is a method for "importing" one [or more]({{mkdocs.site_relative_url}}/bridge/#other-import-statements) docker compose files into your project Makefile, using the `compose.import` macro to automatically generate related make-targets for each docker-compose service.  

Sometimes this "importing" process is referred to as *automation scaffolding*, or we might refer to it as *the make/compose bridge*, or simply.. *the bridge*.

For reference material, you can jump to details about the available [Service Scaffolding](#target-scaffolding), or skip over to details for [Container Dispatch]({{mkdocs.site_relative_url}}/container-dispatch).

For project-automation, it's usually best to separate the details of automation / execution environment, as seen in the first example.  If you are interested in **prototyping systems** or **building self-contained tools/apps,** you can skip the external compose file, and [embed compose service definitions]({{mkdocs.site_relative_url}}/demos/matrioshka/#inlined-compose-files) to generate scaffolding from that directly.

### Basic Example 
<hr style="width:95%;border-bottom:1px dashed black;">

Let's walk through a minimal example, starting with a sample compose file.  

We'll use images for debian and alpine just as examples, but these might be any tool containers that your workflow requires.

{{site.embed_demo('demos/data/docker-compose.minimal.yml', type='yaml', github=github)}}

Next, the Makefile.  To generate make-targets for every service in the given compose file, we just need to include `compose.mk` as a library, then call one of the `compose.import.*` functions.

The simplest way to use `compose.import` is passing in a single argument for the compose-file:

```Makefile {.snippet}
# Inside your project Makefile
include compose.mk
$(call compose.import, file=docker-compose.yml)
```

{#
and specifying we want services-handles as the top-level, plus an optional namespace for .
By default, you'll get 
The arguments *`(some_namespace, TRUE)`* above allow for control of the scaffolding's namespace and syntax.  *(More on that later in the [Macro Arguments section](#macro-arguments).)*  The final argument is just the (unquoted!) name of the file you want to import services from. 
<hr style="width:95%;border-bottom:1px dashed black;">

but The 2nd argument *TRUE* is a bool for whether `compose.import` was allowed to import to the root namespace, you get top-level targets for each service.
#}

That's it for the boilerplate, but we already have lots of interoperability for the containers involved.  This includes stuff like:

* The ability to quickly shell into these containers 
* The usual `docker compose` verbs like *stop/start/up/exec/logs*
* And crucially, *capabilities for command-pipes and dispatch*.

### Target Scaffolding
<hr style="width:100%;border-bottom:3px solid black;">

Targets created as part of the automation scaffolding are can be [top-level names](#top-level-container-handles), [canonical names](#canonical-names), or [manually namespaced](#multiple-compose-files) depending on exactly how you want to setup container import-statements and how verbose you want to be.  Below you can see summaries for each type of scaffolding.

#### Top-level Container Handles
--------------------

Top level container handles are targets that are created in the root namespace, basically mirroring the familiar verbs for docker compose ( *up/down/build/stop/ps/logs* ), plus adding conveniences for things like piping , dispatch, and shells.

* [**`<svc_name>`**](#svc_name): Runs the container with default entrypoint
* [**`<svc_name>`.shell**](#svc_nameshell): Drops into an interactive shell for this container
* [**`<svc_name>`.shell.pipe**](#svc_nameshellpipe): Pipe data into the container shell
* [**`<svc_name>`.get_shell**](#svc_namespecial): Try to detect a usable shell for the container
* [**`<svc_name>`.get_config**](#svc_namespecial): Return service configuration details
* [**`<svc_name>`.dispatch/<target>**](#svc_namedispatch): Runs the given target inside the given container
* [**`<svc_name>`.exec/<target>**](#svc_nameexec): -> Runs the given target inside the *already running* container
* [**`<svc_name>`.build**](#svc_namebuild): -> Roughly `docker compose -f .. build` 
* [**`<svc_name>`.up**](#svc_nameup): -> Roughly `docker compose -f .. up` 
* [**`<svc_name>`.up.detach**](#svc_nameup): -> Roughly `docker compose -f .. up -d` 
* [**`<svc_name>`.build**](#svc_namebuild): -> Roughly `docker compose -f .. build` 
* [**`<svc_name>`.logs**](#svc_namelogs): -> Roughly `docker compose -f .. logs` 
* [**`<svc_name>`.exec.shell**](#svc_nameexec): -> Roughly `docker compose -f .. exec ..` 
* [**`<svc_name>`.ps**](#svc_nameps): -> Roughly `docker compose -f .. ps` 
* [**`<svc_name>`.stop**](#svc_namestop): -> Roughly `docker compose -f .. stop` 
* **...**

So for our simple example so far, `svc_name` would be either `debian` or `alpine`.

Note that using `compose.import` creates top-level handles automatically, but there are other [namespace management options](#other-import-statements) to avoid collisions.  

Also note that while the list above is *mostly* complete, variants are available for things like quiet dispatch, quiet build, etc.  See the source for more details.

#### Canonical Names
------------------------
 
 Canonical scaffolding is sort of like an "absolute path" to the ones mentioned above, plus additional "group" targets that work with several (or all) of the tool container services at the same time.

* [**`<compose_stem>`.services**](#compose_stemspecial): -> Roughly `docker compose -f .. config --services`
* [**`<compose_stem>`.build**](#compose_stemspecial): -> Build everything
* [**`<compose_stem>`.clean**](#compose_stemspecial): -> Clean everything, i.e. `docker compose -f .. down --rm-orphans --rmi`)
* [**`<compose_stem>`.build/`<svc_name>`**](#compose_stemspecial): -> Build just one service
* [**`<compose_stem>`.clean/`<svc_name>`**](#compose_stemspecial): -> Clean just one service
* etc

For our example so far, `compose_stem` from `docker-compose.yml`would be `docker-compose`.  

Canonical names are always created unconditionally with `compose.import` or [any other kind of import statement](#other-import-statements).

There are several other scaffolded entrypoints! But they all follow a pattern like **`<compose_stem>`/`<svc_name>`.`<verb>`**, i.e., basically the same as the corresponding toplevel container handles we saw in the last section.

#### Dispatch Namespace 
--------------------------

User-provided dispatch-namespaces are optional, but often a good idea.  In addition to most of the "group" targets available as **canonical names**, you get [syntactic sugar for target dispatch]({{mkdocs.site_relative_url}}/container-dispatch/#namespace-style-dispatch).

* `<namespace>/<svc>/<target>`: -> roughly `<svc_name>.dispatch/<target>`

{#
Be aware that import-statements that do not explicitly *provide* user-namespaces still have one, but use the default value of `services`.  (Really we expect tool-containers.. but this is in deference to the config-key name used by the docker-compose spec.)
#}

See the [full docs for compose.import](#other-import-statements) and the [main container dispatch docs]({{mkdocs.site_relative_url}}/container-dispatch#toolboxes-multiple-compose-files) for more information. 

### Bridge API
<hr style="width:100%;border-bottom:3px solid black;">

#### **[❡](#svc_nameshell) `<svc_name>`.shell**
<hr style="width:95%;border-bottom:1px dashed black;">

The ***svc_name*.shell** target drops to a containter shell for the named service, and is usually interactive.

```bash {.cli_example}
# Interactive shell on debian container
$ make debian.shell

# Interactive shell on "alpine" container
$ make alpine.shell
```
{{macros.img_link(
  "demo-bridge-shell.gif", 
  mkdocs, class="cli_output")}}


#### **[❡](#svc_namebuild) `<svc_name>`.build**
<hr style="width:95%;border-bottom:1px dashed black;">

The ***svc_name*.build** target explicitly builds containers.  This is for convenience, but usually it's fine to let this happen implicitly or just in time.

```bash {.cli_example}
# Build debian container (respects cache)
$ make debian.build

# Force-build debian container (busts cache)
$ force=1 make debian.build
```


#### **[❡](#svc_nameps) `<svc_name>`.ps**
<hr style="width:95%;border-bottom:1px dashed black;">

The ***svc_name*.ps** target is roughly `docker compose -f .. ps <svc> `.

```bash {.cli_example}
# Shows results for running instances
$ make debian.ps

# Require results for running instances, failing otherwise
$ strict=1 make debian.ps
```

#### **[❡](#svc_nameup) `<svc_name>`.up**
<hr style="width:95%;border-bottom:1px dashed black;">

The ***svc_name*.up** and ***svc_name*.up.detach** targets are roughly `docker compose -f .. up <svc>` and `docker compose -f .. up -d <svc>` respectively, using the default entrypoints as usual.

```bash {.cli_example}
# Foreground mode
$ make debian.up

# Daemon mode
$ make debian.up.detach
```

#### **[❡](#svc_namestop) `<svc_name>`.stop**
<hr style="width:95%;border-bottom:1px dashed black;">

The ***svc_name*.stop** target is roughly `docker compose -f .. stop -t 1 <svc>`.  This does nothing if (`up`) has never been used.

```bash {.cli_example}
# Foreground mode
$ make debian.stop
```

#### **[❡](#svc_namelogs) `<svc_name>`.logs**
<hr style="width:95%;border-bottom:1px dashed black;">

The ***svc_name*.logs** target is roughly `docker compose -f .. logs <svc> `.  

This requires that the container is already running, uses "follow" or "tail" mode by default and never exits.  Under the hood this actually uses `docker logs` and not `docker compose`, which tends to avoid certain issues with pseudo ttys.

```bash {.cli_example}
# Shows results for running instances
$ make debian.logs

# Require results for running instances, failing otherwise
$ strict=1 make debian.ps
```


#### **[❡](#svc_namedispatch) `<svc_name>`.dispatch**
<hr style="width:95%;border-bottom:1px dashed black;">

The ***svc_name*.dispatch/** target is unary rather than nullary like our other examples. It accepts as an argument *another target* which will then be run in the given container.  See the [container dispatch docs](#) for more details, but in this example we'll just pass in the trivial target {{site.api_link('flux.ok',mkdocs)}}.

```bash {.cli_example}
# Run the trivial `flux.ok` target inside the debian container
$ make debian.dispatch/flux.ok
```

#### **[❡](#svc_nameexec) `<svc_name>`.exec**
<hr style="width:95%;border-bottom:1px dashed black;">

The ***svc_name*.exec/** target is almost exactly the same as dispatch, except that it can only be used after ***svc_name*.up** or ***svc_name*.up.detach** has already run.
 
```bash {.cli_example}
# Run the trivial `flux.ok` target inside a daemonized container.
# Won't work for containers that exit immediately!
$ make some_daemon.up.detach some_daemon.exec/flux.ok
```

#### **[❡](#svc_nameshellpipe) `<svc_name>`.shell.pipe**
<hr style="width:95%;border-bottom:1px dashed black;">

The ***svc_name*.shell.pipe** target allows streaming data:

```bash {.cli_example}
# Stream commands into debian container
$ echo uname -n -v | make debian.shell.pipe

# Equivalent to above, because entrypoint for debian is bash
$ echo uname -n -v | make debian.pipe

# Streams command input / output between containers
echo echo echo hello-world | make alpine.pipe | make debian.pipe
```
{{macros.img_link("demo-bridge-stream.gif", mkdocs,class="cli_output")}}

#### **[❡](#svc_name) `<svc_name>`**
<hr style="width:95%;border-bottom:1px dashed black;">

The top-level **svc_name** targets are more generic and can be used without arguments, or with optional explicit overrides for the compose-service defaults.  Usually this isn't used directly, but it's sometimes useful to call from automation. Indirectly, most other targets are implemented using this target.

```bash {.cli_example}
# Overriding compose defaults:
#   Runs an arbitrary command on debian container 
$ entrypoint=ls cmd='-l' make debian

# Streams data into an arbitrary command on alpine container
$ echo hello world | pipe=yes entrypoint=cat cmd='/dev/stdin' make alpine
```

#### **[❡](#svc_namespecial) `<svc_name>`/`<special>`**
<hr style="width:95%;border-bottom:1px dashed black;">

Besides targets for working *with* services there are targets for answering questions *about* services.

The ***`<svc_name>`*.get_shell** targets answers what shell can be used as an entrypoint for the container. Usually this is `bash`, `sh`, or an error, but when there's an answer you'll get it in the form of an absolute path.

```bash {.cli_example}
$ make debian.get_shell
```
```markdown {.cli_output}
/bin/bash
```

The ***<svc_name>*.get_config** target dumps JSON-formatted config for the given tool container.  This turns off most of the string-interpolation and path-resolution that happens by default.  

Any additional arguments that are passed as ***`<svc_name>`*.get_config/*`<filter>`*** will be passed to jq for drilling down.

```bash {.cli_example}
$ make alpine.get_config/build.context
```
```markdown {.cli_output}
.
```

```bash {.cli_example}
$ make alpine.get_config
```
```json {.cli_output .language-json}
{
  "build": {
    "context": ".",
    "dockerfile_inline": "FROM ${IMG_ALPINE_BASE:-alpine:3.21.2} \nRUN apk add -q --update --no-cache coreutils build-base bash procps-ng"
  },
  "entrypoint": "bash",
  "hostname": "alpine",
  "networks": {
    "default": null
  },
  "volumes": [
    {
      "source": "${PWD}",
      "target": "/workspace",
      "type": "volume",
      "volume": {}
    },
    {
      "source": "${DOCKER_SOCKET",
      "target": "-/var/run/docker.sock}",
      "type": "volume",
      "volume": {}
    }
  ],
  "working_dir": "/workspace"
}
```

#### **[❡](#svc_compose_stemsvc) `<compose_stem>/<svc>`**
<hr style="width:95%;border-bottom:1px dashed black;">

Namespaced aliases are also available, so that you can reference compose services by something like an "absolute path".  Due to the file-stem of the compose file we imported, all of the stuff above will work on targets like you see below. 

```bash {.cli_example}
$ make docker-compose/debian
$ make docker-compose/debian.shell
```

#### **[❡](#svc_compose_stemcmd) `<compose_stem>`.`<cmd>`**
<hr style="width:95%;border-bottom:1px dashed black;">

Besides targets for working with compose-services, some targets work on the compose file itself.  Assuming your compose file is named `docker-compose.yml`, the special targets work like this:

```bash {.cli_example}

# Build 
# Equivalent to `docker compose -f docker-compose.yml build`
$ make docker-compose.build

# Build 
# Equivalent to `docker compose -f docker-compose.yml stop`
$ make docker-compose.stop

# Clean 
# Equivalent to `docker compose -f docker-compose.yml down --remove-orphans`
$ make docker-compose.clean

# List all services defined for file (Array of strings, xargs-friendly)
$ make docker-compose.services
```

Using the `<compose_stem>.services` target, it's easy to map a command onto every container.  Try something like this:

```bash {.cli_example}
$ make docker-compose.services \
  | xargs -I% sh -x -c "\
    echo uname -n \
      | make docker-compose/%.shell.pipe"
```
```bash {.cli_output}
alpine
debian
ubuntu
```

### Other Import Statements
<hr style="width:100%;border-bottom:3px solid black;">

So far we've used the simplest syntax for `compose.import`, but there's a few ways to do this.


#### **Root + Namespace**
<hr style="width:95%;border-bottom:1px dashed black;">


Here's a variation that configures [syntactic sugar for dispatch namespaces]({{mkdocs.site_relative_url}}/container-dispatch/#namespace-style-dispatch), by providing a 2nd argument to `compose.import`.

```Makefile {.snippet}
include compose.mk
$(call compose.import, \
  file=path/to/docker-compose.yml namespace=my_namespace)
```

#### **Namespace Only**
<hr style="width:95%;border-bottom:1px dashed black;">

Recall that `compose.import` as used above defaults to creating top level targets.  

To configure a user-provided dispatch-namespace and **not** import targets to the root.. use `compose.import.as`

```Makefile {.snippet}
include compose.mk
$(call compose.import.as, \
  file=path/to/docker-compose.yml namespace=my_namespace)
```

See also [the platform demo]({{mkdocs.site_relative_url}}/demos/platform).

#### **Multiple Compose Files**
<hr style="width:95%;border-bottom:1px dashed black;">

The namespace-only style is perhaps the most useful for working with multiple compose files, and is an effective way to organize your tool containers into different "tool boxes" at the docker-compose level.  Here's an example of how you could separate code-tools vs infracode-tools:

```Makefile {.snippet}
include compose.mk

# Load 1st compose file under paralleogram namespace,
$(call compose.import.as, \
  namespace=▰ file=my-compose-files/build-tools.yml)

# Load 2nd compose file under triangle namespace
$(call compose.import.as, \
  namespace=▲ file=my-compose-files/cluster-tools.yml)

# Top-level "build" target that dispatches subtargets
# "build-code" and "build-cluster" on different containers
build: ▰/maven/build.code ▲/kubectl/build.cluster
build.cluster:
  kubectl .. 
build.code:
  maven ...
```

There's lots of ways to use this, and if your service-names across several files do not collide, you are free to put everything under exactly the same namespace.  It's only syntax, but if you choose the conventions wisely then it will probably help you to think and to read whatever you're writing.

See the [container dispatch docs]({{mkdocs.site_relative_url}}/container-dispatch/#toolboxes-multiple-compose-files) for a concrete demo.

#### **Inlined / Embedded / From-String** 
<hr style="width:95%;border-bottom:1px dashed black;">

So far, we've been working with files, but generating target-scaffolding can also work on strings, i.e. with [embedded compose files]({{mkdocs.site_relative_url}}/demos/matrioshka).  See that documentation for examples, but below you can find the basic usage.  Note that "namespace" is implied, because it always the same as the define-block's name.

```Makefile {.snippet}
include compose.mk

define embedded_services
...
endef

$(call compose.import.string, def=embedded_services)
```

See the [matrioshka demos]({{mkdocs.site_relative_url}}/demos/matrioshka/#inlined-compose-files) for a concrete demo.

To avoid cluttering the root namespace, pass `import_to_root=FALSE`, and only the [canonical names](#canonical-names) will be available.

```Makefile {.snippet}
$(call compose.import.string, \
  def=embedded_compose.yml import_to_root=FALSE)
```

### But Why? 🤔
<hr style="width:100%;border-bottom:3px solid black;">

At first glance, maybe you're thinking this looks like lots of magic to save a little bit of typing and simply using `docker compose -f ..` from your Makefiles.  Well, it's true that this method of "importing" compose services as `make` targets is often just paving the way for [container dispatch]({{mkdocs.site_relative_url}}) later.

Even without dispatch though, native support for containers as primitives is useful, especially when you start to use **actions on those containers as prerequisite tasks**.  So far we've seen that scaffolded targets effectively create an API over tool containers, but what's not emphasized yet is just how composable that API really is.

If you're unconvinced on this point, you might like to skip ahead to some more advanced stuff that is digging into this topic, like [the TUI docs]({{mkdocs.site_relative_url}}/embedded-tui) or [the notebooking demo]({{mkdocs.site_relative_url}}/demos/notebooking).

{#
### Import Macro Implementation
<hr style="width:100%;border-bottom:3px solid black;">

For the curious who are unfamiliar with esoteric `make`, let's unpack the incantation: 

```Makefile {.snippet}
$(eval $(call compose.import.generic, ▰, TRUE, docker-compose.yml))
```

The [`eval`](https://www.gnu.org/software/make/manual/html_node/Eval-Function.html) / [`call`](https://www.gnu.org/software/make/manual/html_node/Call-Function.html) combination is how you can give `make` dynamic targets.  This is basically a code-generation step, where `compose.import.generic` is basically a templated string, and then using `call` binds the values `( ▰, TRUE, docker-compose.yml)` as template parameters.  *Since the templated string happens to render to legal Makefile syntax*, the call to `eval` results in the declaration of new concrete targets.

Understanding the implementation isn't required to *use* it.. and metaprogramming in `make` like this is something that's always guaranteed to inspire strong feelings of horror or of delight.  If you're *that* type of weirdo, you might like to read more about the technique here[^1].
#}

### References
<hr style="width:100%;border-bottom:3px solid black;">

[^1]: [https://make.mad-scientist.net/the-eval-function/](https://make.mad-scientist.net/the-eval-function/)

<script>
document.addEventListener('DOMContentLoaded', function() {setTimeout(function() {
addImageToHeader('other-import-statements','/{{mkdocs.config.site_name}}/img/import.svg')
addImageToHeader('basic-example','/{{mkdocs.config.site_name}}/img/basics.svg')
addImageToHeader('target-scaffolding','/{{mkdocs.config.site_name}}/img/api.svg')
//addImageToHeader('bridge-api','/{{mkdocs.config.site_name}}/img/api.svg')
addImageToHeader('bridge-api','/{{mkdocs.config.site_name}}/img/bridge.svg')
addImageToHeader('import-services-from-compose','/{{mkdocs.config.site_name}}/img/compose.png',style="margin-top:-10px;height:2.2em;")
//addImageToHeader('import-macro-implementation','/{{mkdocs.config.site_name}}/img/implementation.svg')
}, 100);});
</script>
