{% import 'macros.j2' as macros -%}

## Library Overview 
<hr style="width:100%;border-bottom:3px solid black;">

{#A Standard Library for Makefiles#}

Because `make` has never really had a standard library, there's lots of pretty basic stuff that is conspicuously missing.  This includes things like [logging and colored output](#logging-facilities), but also the kind of [online help]({{mkdocs.site_relative_url}}/cli-help) that can help you list and inspect automation that's been defined.

**In library-mode,** `compose.mk` is used as an `include` from your project Makefile (see the [installation docs]({{mkdocs.site_relative_url}}/integration) for more details).  After including `compose.mk`, you'll have access to a a library of make-targets and macros.  Most of what `compose.mk` offers is in the form of **reusable *static targets*, which you can directly use from the command line, or use as part of normal tasks or as task-prerequisitess inside your Makefile **. 

**In terms of interface and in terms of internal *style***, `compose.mk` tends to avoid macros and other fancy Makefile'isms because compared with targets, they are more magical, less reusable, and less composable.  Still, there are many places where compromising on this makes sense. In *some cases* macros do actually improve readability (*for example writing `${stream.stdin}` instead of `cat /dev/stdin`*) and we adopt those in places that seem self-documenting.  For stuff like [logging](#logging-facilities) or [autogenerated target scaffolding]({{mkdocs.site_relative_url}}/bridge), there's no avoiding usage of `$(call ..)`.  Macros are also used sometimes as an optimization to avoid extra processes, but in cases like that there's usually a target-equivalent available.

{#In addition to static targets, `compose.mk` can create dynamic targets with the *`compose.import`* macro.  This can be [used with *multiple* compose files ]({{mkdocs.site_relative_url}}/multiple-compose-files), and [supports target namespacing]({{mkdocs.site_relative_url}}/macro-arguments).#}

Documentation for [the full target API]({{mkdocs.site_relative_url}}/api) is generated from source, and is the same as what is available from the [CLI help]({{mkdocs.site_relative_url}}/cli-help).

{#
[make-functions](https://www.gnu.org/software/make/manual/html_node/Functions.html)
Regardless of whether you're using the built-in support for compose-files, `compose.mk` has many other features that extend the core capabilities of `make`, including **a curated collection of macros and reusable utility targets.  (In fact.. since make-targets always do double-duty as CLI entrypoints and as reusable task units, the "internal API" is [automatically published as a CLI interface]({{mkdocs.site_relative_url}}/tool-overview)).

Here's a brief overview of how the modules are layed out.

* **No host dependencies.** This uses the `compose.mk:tux` tool container to dockerize tmux itself.Built-in supervisor process, [improving support for signal handling](#signals-and-supervisors).
  * **Supports docker-in-docker style host-socket sharing with zero configuration,** so your TUI can generally do all the same container orchestration tasks as the docker host.
  * Open split-screen displays, shelling into 1 or more of the tool containers in k8s-tools.yml (or any other compose file).
  * Combines well with `flux.*` targets to quickly create dashboards / custom development environments.

With that in place, you have access to a few different possibilities:

1. Autogenerated **[build a bridge between docker-compose services and make-targets](#makecompose-bridge)** and [**dispatch make-targets inside tool containers.**](#container-dispatch).  
#}

### Module Layout
<hr style="width:100%;border-bottom:3px solid black;">

Here's an overview for how the `compose.mk` standard library is organized into modules: you can dive into the module or target-level documentation anywhere that looks interesting.  If you prefer a more guided tour, check out the rest of this page for a few of the random highlights.

* [**`flux.*` targets:**]({{mkdocs.site_relative_url}}/api#api-flux) A tiny but powerful workflow/pipelining API, roughly comparable to something like declarative pipelines in Jenkins[^1], providing concurrency, retry operators, etc.  You can also think of it as "target algebra" for `make`, similar to how bash provides process algebra.

* [**`tux.*` targets:**]({{mkdocs.site_relative_url}}/api/#api-tux) A control-surface for a tmux-backed console geometry manager. See the [embedded TUI docs]({{mkdocs.site_relative_url}}/embedded-tui) for a higher level overview and demos.

* [**`stream.*`:**]({{mkdocs.site_relative_url}}/api#api-stream) Support for working with streams, including newline/comma/space delimited streams, common use cases with JSON, etc.  Everything here is used with pipes, and reads from stdin.  It's not what you'd call "typed", but it reduces error-prone parsing and moves a little bit closer to structured data.

* [**`io.*`:**]({{mkdocs.site_relative_url}}/api#api-io) Misc. utilities for printing, formatting, timers, etc.

* [**`docker.*`:**]({{mkdocs.site_relative_url}}/api#api-docker) An interface for working with docker.

* [**`mk.*`:**]({{mkdocs.site_relative_url}}/api#api-docker) Meta-tooling for 'make' itself. This enables help functions, signals and supervisors, some utilities for reflection, etc.

* [**`compose.*`:**]({{mkdocs.site_relative_url}}/api#api-docker) An interface for working with compose. 

{% include "structured-io.md.j2" %}

{% include "logging.md.j2" %}

{% include "workflow-support.md.j2"%}
{% include "reflection.md.j2" %}

{% include "user-input.md.j2" %}

<hr style="width:100%;border-bottom:3px solid black;">

[^1]: See https://www.jenkins.io/doc/book/pipeline/syntax/
[^2]: Make-targets can be used as task-prerequisites as well as command line entrypoints
[^3]: https://github.com/h4l/json.bash
[^4]: https://github.com/jqlang/jq
[^5]: https://github.com/mikefarah/yq
[^6]: Yes, technically JSON is only "semi-structured" without additional schema commitments, etc
[^7]: [Homoiconic?]({{mkdocs.site_relative_url}}/matrioshka#homoiconic)

