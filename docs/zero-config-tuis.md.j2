{% import 'macros.j2' as macros -%}

### Zero Config TUIs

As a quick option for interacting with third-party projects that you can't control and don't want to edit, zero-config TUIs are part of what makes `compose.mk` useful in [tool mode]({{mkdocs.site_relative_url}}).  Since the TUI is mainly focused around *building* TUIs instead of providing them ready to use, the idea of a "zero config" TUI might seem strange.  Ultimately, you do need to bring a docker-compose file **or** a Makefile, but you can skip the usual [project integration]({{mkdocs.site_relative_url}}/integration).  

<hr style="width:95%;border-bottom:1px dashed black;">

**If your project has a docker-compose file,** you might be interested in the `loadf` command (full docs [here]({{mkdocs.site_relative_url}}/loadf)).  For convenience, the `loadf` command bypasses integration and will still let you do basic stuff with the containers defined inside the compose file.  

```bash 
# Opens 3 panes with container-shells, one for each of the containers in the file.
$ ./compose.mk loadf tests/docker-compose.yml
```

{{macros.img_link("loadf-1.png", mkdocs, "350px")}}

Implicitly the `loadf` is dynamically creating make-targets corresponding to the compose-services.  We can get explicit by using `tux.open` as seen in the [Layout Section](#layout-basics), and passing in services names or target names:

```bash
# Equivalent to above, but more explicit and less magical.
$ layout=spiral ./compose.mk loadf tests/docker-compose.yml \
    tux.open.service_shells/debian,alpine,ubuntu

# Equivalent to above, but even more explicit
$ layout=spiral ./compose.mk loadf tests/docker-compose.yml \
    tux.open/debian/shell,alpine/shell,ubuntu/shell
```

<hr style="width:95%;border-bottom:1px dashed black;">

**If your project has a Makefile,** you might be interested in the `mk.include` target, which effectively simulates a `include compose.mk` in your project Makefile without actually adding one.  For demonstrating this, consider the following classic Makefile that just defines fake `build`, `clean`, and `test` targets that do nothing.

```Makefile
{{open('demos/no-include.mk','r').read().strip()}}
```

Using `mk.include` by itself works how you'd expect, but does nothing very interesting:

```bash
# Roughly equivalent to `make -f demos/no-include.mk`
$ ./compose.mk mk.include/demos/no-include.mk 
cleaning
building
testing
```

The interesting part is that using `tux.open` in the way that we've already seen *also* works how you'd expect.  So you can use the command below to opens each target in a separate pane:

```bash
$ ./compose.mk mk.include/demos/no-include.mk tux.open/clean,build,test
```

Now, this is neat but it's not that useful to run clean/build/test in parallel.  How about something more practical, like starting a TUI that runs the clean/build targets back-to-back, plus a separate pane that's running the tests in a loop?  This is actually doable!  For it to happen, we'll have to leverage the workflow helpers in the [`flux.*`](#) target namespace.  And like you might expect since we're still *completely avoiding writing config or custom code*, the command line starts to get complicated. Let's build it up piece by piece.  

```bash
# Running `clean` and `build` in one step:
$ ./compose.mk mk.include/demos/no-include.mk flux.wrap/clean:build
cleaning
building

# Looping the test-target forever
$ ./compose.mk mk.include/demos/no-include.mk flux.loopf/test
testing
testing
testing
^C

# Putting it all together
$ layout=horizontal \
    ./compose.mk mk.include/demos/no-include.mk \
        tux.open/flux.loopf/test,flux.wrap/clean:build
```

{{macros.img_link("loadf-1.png", mkdocs, "350px")}}

Expanding on this.. you could add the `io.bash` target to the comma-separated list of `tux.open` arguments for an additional pane featuring an interactive shell.  Or you could add the `io.env/<prefix>` target to dump a list of relevant environment variables for this project.  You get the idea.

But again, the command-line here is getting unwieldy, and a CLI swiss-army knife will only take you so far.  The next section looks at how we can achieve the same thing by actually editing files.

<hr style="width:100%;border-bottom:3px solid black;">
