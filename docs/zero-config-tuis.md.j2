{% import 'macros.j2' as macros -%}

### Zero Config TUIs

<hr style="width:100%;border-bottom:3px solid black;">

As a quick option for interacting with third-party projects that you can't control and don't want to edit, zero-config TUIs are part of what makes `compose.mk` useful in [tool mode]({{mkdocs.site_relative_url}}).  

Examples here all involve full-blown TUIs, i.e. multi-pane content with layouts that can be created with no code/config.  For something simpler that's still interactive, see also the [selector docs]({{mkdocs.site_relative_url}}/selector).

#### Basic Examples 

<hr style="width:100%;border-bottom:3px solid black;">

For a simple demo that's just exercising containerized `tmux`, geometry, and dispatching targets to panes.. try `./compose.mk tux.demo`:

{{macros.img_link("tui-tte.gif", mkdocs, "350px")}}

Embedded TUI capapbilities are usually pulled/built just-in-time and on request, then cached afterwards. So besides doing some basic testing, this has the effect of "priming" the TUI for the other examples below.

<hr style="width:95%;border-bottom:1px dashed black;">

For a more involved example of dashboarding, you can try `./compose.mk docker.commander`.  This demonstrates using other containers as TUI widgets- in this case we combine [lazydocker](https://github.com/jesseduffield/lazydocker), [moncho/dry](https://github.com/moncho/dry), and [imgrot](https://github.com/Robot-Wranglers/docker-imgrot).


{{macros.img_link("docker.commander.gif", mkdocs, "350px")}}


#### Working with Compose-Files
<hr style="width:100%;border-bottom:3px solid black;">

**If your project has a docker-compose file,** the [selector docs]({{mkdocs.site_relative_url}}/selector/#interactive-container-selection) describe how you can select a single container interactively and shell into it.  In a similar vein, you can also use the [`loadf` command]({{mkdocs.site_relative_url}}/loadf) to **open several container shells at once.**

```bash 
# Opens 3 panes with container-shells, one for each of the containers in the file.
$ ./compose.mk loadf demos/data/docker-compose.yml
```

{{macros.img_link("loadf-1.png", mkdocs, "70%")}}

-------------------------

Implicitly `loadf` is dynamically creating make-targets corresponding to the compose-services.  We can get more explicit by using `tux.open` as seen in the [Layout Section]({{mkdocs.site_relative_url}}/embedded-tui/#layout-basics), and passing in services names or target names:

```bash
# Equivalent to above, but more explicit and less magical.
$ layout=spiral ./compose.mk loadf demos/data/docker-compose.yml \
    tux.open.service_shells/debian,alpine,ubuntu

# Equivalent to above, but even more explicit
$ layout=spiral ./compose.mk loadf demos/data/docker-compose.yml \
    tux.open/debian.shell,alpine.shell,ubuntu.shell
```

#### Working with Makefiles

<hr style="width:100%;border-bottom:3px solid black;">

**If your project has a Makefile,** the [selector docs]({{mkdocs.site_relative_url}}/selector/#interactive-target-selection) show how you can interactively select/run individual targets.  In a similar vein, **working with multiple targets and simple "dashboarding" across targets is also possible** with no special configuration.  This involves the {{macros.api_link('mk.include', mkdocs)}} target, which effectively simulates a `include compose.mk` in your project Makefile *without actually adding one.*

For demonstrating this, we'll use the following classic Makefile, which does **not** include `compose.mk` itself, and simply defines fake `build`, `clean`, and `test` targets that do nothing.

```Makefile
{{open('demos/no-include.mk', 'r').read().strip()}}
```

Using `mk.include` by itself works in the way that you'd probably expect, but does nothing very interesting:

```bash
# Roughly equivalent to `make -f demos/no-include.mk`
$ ./compose.mk mk.include/demos/no-include.mk 
cleaning
building
testing
```

The interesting part is that using `tux.open` in the way that [we've already seen]({{mkdocs.site_relative_url}}/embedded-tui/#layout-basics) *also* works how you'd expect here.  Thus you can use the command below to open each target in a separate pane:

```bash
$ ./compose.mk mk.include/demos/no-include.mk tux.open/clean,build,test
```

-------------------------

So this is neat.. but it's not that useful to run *clean/build/test* in parallel.

How about something more practical, like starting a TUI that runs the *clean/build* targets back-to-back, plus a separate pane that's running *test* in a loop?  This is actually doable.  For it to happen, we can leverage the workflow helpers in the [`flux.*`]({{mkdocs.site_relative_url}}/api#api-flux) target namespace.  The command line for this starts to get complicated, so let's build it up one piece at a time. 

```bash
# Running `clean` and `build` in one step:
$ ./compose.mk mk.include/demos/no-include.mk flux.wrap/clean:build
cleaning
building

# Looping the test-target forever
$ ./compose.mk mk.include/demos/no-include.mk flux.loopf/test
testing
testing
testing
^C

# Putting it all together
$ layout=horizontal \
    ./compose.mk mk.include/demos/no-include.mk \
        tux.open/flux.loopf/test,flux.wrap/clean:build
```

{{macros.img_link("zero-config-tui.gif", mkdocs, "85%")}}

-------------------------

Expanding on this.. you could add the `io.bash` target to the comma-separated list of `tux.open` arguments for an additional pane featuring an interactive shell.  Or you could add the {{macros.api_link('io.env',mkdocs,arg='var_prefix')}} target to dump a list of relevant environment variables for this project.  You get the idea.

This is pretty useful, but the command-line is unwieldy, and a swiss-army knife CLI will only take you so far.  The next section looks at how we can achieve the same thing by editing files and avoiding one-liners.

<hr style="width:100%;border-bottom:3px solid black;">
