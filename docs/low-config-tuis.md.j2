{% import 'macros.j2' as macros -%}

### Low Config TUIs

In the docs for zero-config TUIs, we saw a few ways to start up interfaces without any project integration.  In the end though, the CLI starts to get pretty clunky, and it's better to have somewhere else to put configuration.

Let's revisit that [previous example]({{mkdocs.site_relative_url}}/zero-config-tuis/#working-with-makefiles) in a less adhoc way, extending the classic *clean/build/test* project Makefile with a TUI as before, but using code this time.

```Makefile
{{open('demos/dashboarding.mk','r').read().strip()}}
```

{{macros.img_link("dashboarding.gif", mkdocs, "250px")}}
{#

Let's walk through some examples, supposing you already have targets for `clean`, `build`, `test`.  You can open a 3-pane TUI by just calling `make tux.mux/clean,build,test`.  This runs all of the named targets in parallel, and the whole TUI will exit after the individual tasks are completed.

Of course, it probably doesn't make sense to run `clean`/`build`/`test` in parallel.  To get more flexibility here, it's often useful to use [`flux.*`, aka the workflow library]({{mkdocs.site_relative_url}}/api/#api-flux).  

* We can run sequentially run `clean` and `build` by using `flux.wrap`, i.e. `flux.wrap/clean,build`
* We can run `test` in a loop forever by using `flux.loopf/test`

Putting it together, we can make a completely different TUI with this command line: 

```bash 
$ make tux.mux/flux.wrap/clean,build,flux.loopf/test
```

And if you're interested in building your own TUIs, see the [Dashboarding demo]({{mkdocs.site_relative_url}}/demos/dashboarding.mk).
#}

<hr style="width:100%;border-bottom:3px solid black;">
