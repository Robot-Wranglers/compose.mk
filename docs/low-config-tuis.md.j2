{% import 'macros/base.j2' as macros -%}{% import 'macros/site.j2' as site -%}

### Low Config TUIs
<hr style="width:100%;border-bottom:3px solid black;">

In the docs for [zero-config TUIs]({{mkdocs.site_relative_url}}/zero-config-tuis) leading up to this point, we saw a few ways to start up interfaces without any project integration.  

In the end though, the CLI starts to get pretty clunky, and it's better to have somewhere else to put configuration.  For `compose.mk`, it's often the case that **configuration is code and vice versa**, or in other words, you can do a surprising amount of work in a tidy declarative style without writing any custom target-bodies.

#### Basic Example 
<hr style="width:100%;border-bottom:3px solid black;">

Let's revisit [a previous example]({{mkdocs.site_relative_url}}/zero-config-tuis/#working-with-makefiles) in a less adhoc way, basically extending the classic *clean/build/test* project Makefile with a TUI as before, but using code this time.  As before, the goal is to loop the *test* task, and run the *clean/build* tasks sequentially-- in separate panes at the same time.  

{{site.embed_demo('demos/dashboarding.mk', github=github)}}

Look, **no target bodies!**  The declarative flavor is nice, and this is frequently the case for TUI customization: mostly we just need declare groups of existing targets and/or flow between them. We've seen that this frequently involves `compose.mk::flux` targets, like {{site.api_link('flux.loopf',mkdocs,arg='target_name')}} and {{site.api_link('flux.and',mkdocs,arg='targets')}}.  

Running it looks like this:

{{macros.img_link("dashboarding.gif", mkdocs, "93%")}}

It's really no surprise that the implementation is small, since it only needs minor changes compared with the CLI version we saw earlier.

{# <hr style="width:95%;border-bottom:1px dashed black;"> #}

#### Adding a Container as a "Widget"
<hr style="width:100%;border-bottom:3px solid black;">

One powerful technique is to run a container inside a dedicated pane as a "widget".  As a simple example, we'll extend the example so far to include [`moncho/dry`](https://github.com/moncho/dry), a docker-monitoring application.

Adding a new "middle" pane using this container image only changes two lines, and doesn't break the declarative style:

{{site.embed_demo('demos/tui/dashboarding-widgets.mk', github=github)}}

You might recognize the new widget, since we just recreated part of the `docker.commander` TUI mentioned in [docs for zero-config TUIs]({{mkdocs.site_relative_url}}/zero-config-tuis).  Our work so far looks like this:

{{macros.img_link("tui-containers-as-widgets.png", mkdocs, "78%")}}

Above, the {{site.api_link('docker.start.tty', mkdocs, arg='img')}} target does the heavy lifting for us, and depending on your exact use-case you might have to write a target-body, or use other related targets like {{site.api_link('docker.start',mkdocs,arg='img')}} , {{site.api_link('docker.dispatch/<arg>',mkdocs)}} , or {{site.api_link('docker.run.sh', mkdocs)}}.

Crucially, the `docker.*` targets are designed to launch tool containers, so they [**always share the working directory and the docker socket by default**]({{mkdocs.site_relative_url}}/raw-docker#tool-container-defaults).  You can always launch a dockerized "widget" by writing any target-body that directly calls `docker run ...`, but if you do it this way you probably need to remember add volume-mounts.

#### Mixing in Container Dispatch
<hr style="width:100%;border-bottom:3px solid black;">

Eagle-eyed readers will have noticed that our fake *clean/build/test* targets don't need special tools, and that we are lucky so far because *these targets are running inside the embedded TUI container*, and not on the host or in a dedicated tool container.

Of course, if your automation fails to run inside the embedded TUI container, then it would probably also fail to run inside any fresh environment... or in other words, your automation is already broken =P

Regardless of whether you want to use the TUI, the way to begin to address this problem may involve some combination of [container dispatch]({{mkdocs.site_relative_url}}/container-dispatch) with internal or externally-defined Dockerfiles, compose-files, etc.  In many cases though, tool containers are already available, and already ship with basics like `make` and `bash`.  For this situation, we can again get away with very minimal changes.

To see what it looks like, let's suppose for the next example that we need golang tools available for *clean/build* phases.  

The tightest way to describe this is very functional, but not very pretty.  We'll use it as a starting place though, and refactor from there.

-----------------------------

{{site.embed_demo('demos/tui/dashboarding-dispatch.mk', github=github)}}

!!! closer_look "Closer Look"
    The magic line above uses `docker.image.dispatch/<image>/<target>`, and in this case the image is `golang:1.24-bookworm`.  (To stick with the declarative style, we have to escape the colon to declare a legal prerequisite target.)

Above, we've also changed the *clean/build* targets to actually *use* golang tools.  And we changed `flux.and` arguments to include `io.shell` at the end so that the interactive shell we're left with in that pane is *running inside the golang container*, and not the TUI container.

-----------------------------

As with the zero-config TUI examples before, this is getting somewhat unwieldy and hard to read.  But since we're scripting now, there are several ways to refactor it as something cleaner.  

For demonstrating that, we'll include the last example and just change the `bottom` target.  Typically for something like this you just need to introduce 1 or more intermediate targets:

{{site.embed_demo('demos/tui/dashboarding-dispatch-2.mk', github=github)}}

#### Next Steps
<hr style="width:100%;border-bottom:3px solid black;">

That's it for the basics of low-config TUIs.  In the [next section]({{mkdocs.site_relative_url}}/advanced-tuis), we'll cover more advanced usage.

{#
<hr style="width:100%;border-bottom:3px solid black;">
#}

<script>
document.addEventListener('DOMContentLoaded', function() {setTimeout(function() {
{{macros.header_images([
	['next steps','next'],
	['mixing in container dispatch','dispatch'],
	['basic example','basics'],
	['low-config-tuis','tui'],
], mkdocs)}}
}, 100);});
</script>
