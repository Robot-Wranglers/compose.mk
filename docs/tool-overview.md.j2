{% import 'macros.j2' as macros -%}

## Tool Overview
<hr style="width:100%;border-bottom:3px solid black;">

Much of what `compose.mk` does is focused on helping you to [generate automation scaffolding]({{mkdocs.site_relative_url}}/bridge), but that approach requires a pre-existing project and [some project integration]({{mkdocs.site_relative_url}}/quickstart#project-integration). 

**In Stand-alone Mode,** you can still use many of those features but skip the usual project integration.  In other words, project Makefiles, project docker-compose files, etc become optional.  This is less powerful and less flexible, but still results in a neat little swiss army knife that has some unique capabilities.  Most use-cases for stand-alone mode will fall into one of these categories:

{#
### Use-Cases for Stand Alone Mode
<hr style="width:100%;border-bottom:3px solid black;">
#}

1. **Wrapped versions of common tools,** so that they are available *by default* in more environments without adding more dependencies.  For example, `./compose.mk jq` defaults to using local executable if one is available, and falls back to a dockerized version of the tool otherwise. See the [tool wrappers section](#tool-wrappers) of this page for a more complete manifest.
* **General bash kung-fu,** which might help clean up other scripts or can be used interactively. In many cases, `compose.mk` idioms are easier to read and write.  For examples, see [here]({{mkdocs.site_relative_url}}/standard-lib/#structured-io-stream-types-pipes), [here]({{mkdocs.site_relative_url}}/raw-docker/#other-docker-utilities), [etc]({{mkdocs.site_relative_url}}/standard-lib/#functional-style), and refer to the [full target API]({{mkdocs.site_relative_url}}/api).
* **Runner interface** for interactive-selection for make-targets or compose-containers.  See the separate documentation & demos [here]({{mkdocs.site_relative_url}}/selector).
* **Loading compose files just-in-time.** Separate [documentation here]({{mkdocs.site_relative_url}}/loadf), but briefly.. this gives access to all of [the scaffolded targets]({{mkdocs.site_relative_url}}/bridge/#dynamic-api), and if no downstream targets are given, the default behaviouir is to open interactive shells for each tool container in a TUI.

{#Additionally, one of the major benefits of using `make` over plain bash scripting is that details for CLI entrypoints are handled automatically.  In fact, *make-targets always do double-duty as CLI entrypoints and as reusable tasks*, or in other words, **the "internal API" is automatically published as a CLI interface.**  
Because of this basic duality, even the documentation for "programmatic" usage of `compose.mk` as a library tends to introduce or demonstrate concepts by using tool-mode first.  Even if you're not interested in `compose.mk` as a library for scripting.. the [library docs]({{mkdocs.site_relative_url}}/standard-lib) and the [full API ]({{mkdocs.site_relative_url}}/api) both have many examples that are relevant for stand-alone mode.  Just search for `./compose.mk` to find them.
and the {{macros.api_link('compose.select',mkdocs)}} and {{macros.api_link('mk.select',mkdocs) }} targets
1. **Cleaning up gnarly bash.**  In certain cases using `compose.mk` idioms can be easier to read and write.  For example, if your scripts are littered with `docker run ..` invocations, you might look at some of the [raw docker support]({{mkdocs.site_relative_url}}/raw-docker) for alternatives.  Tools available as part of [the standard library]({{mkdocs.site_relative_url}}/standard-lib) for logging, stream previews, and workflows also might be useful.
#}

### Tool Wrappers
<hr style="width:100%;border-bottom:3px solid black;">

Some tools are so useful that we'd really like to assume they are available everywhere.  How can that happen though if we're not sure whether they are installed?  To address this, `compose.mk` publishes several tool-wrappers that default to using a local executable if one is available, and falls back to a dockerized version of the tool otherwise.  (In case you end up using dockerized tools, they are pulled just in time but cached afterwards.)

A few examples of tools that `compose.mk` wraps in one way or another include: 

* [jq](https://github.com/jqlang/jq), for querying JSON
* [jb](https://github.com/h4l/json.bash), for constructing JSON
* [yq](https://github.com/mikefarah/yq), for querying yaml and other stuff
* [charmbracelet/glow](https://github.com/charmbracelet/glow), for rendering markdown on console
* [charmbracelet/gum](https://github.com/charmbracelet/gum), for a variety of pretty text-formatting tricks
* [pygments](https://pygments.org/), for syntax highlighting data or code 
* [chafa](https://github.com/hpjansson/chafa), for rendering images on console
* [tmux](https://github.com/tmux/tmux) and friends, for console geometry management (see also: [embedded tui]({{mkdocs.site_relative_url}}/embedded-tui))
* [makeself](https://makeself.io) for creating self-extracting archives (see also: [packaging]({{mkdocs.site_relative_url}}/demos/packaging))

#### Proxy Wrappers
<hr style="width:100%;border-bottom:3px solid black;">

The first 3 tools `jq`, `jb`, and `yq` are the most generally useful.  They all have extensive documentation elsewhere to cover what they do and how to use them, and mostly `compose.mk` tries to stay out the way. 

For tools like these, `compose.mk` generally takes the approach of **using it directly if possible,** and then **transparently falls back to docker if the tool is missing.**.  Calling them with `compose.mk` looks like this:

```bash  {.cli_example} {.command-line}
# Generate JSON with jb
$ ./compose.mk jb key=val
```
```bash {.cli_output}
{"key":"val"}
```

```bash  {.cli_example} {.command-line}
# Generate JSON with jb (alternate)
$ echo key=val | ./compose.mk jb
```
```bash {.cli_output}
{"key":"val"}
```

```bash  {.cli_example} {.command-line}
# Parse JSON with jq
$ ./compose.mk jb key=val | ./compose.mk jq .key
```
```bash {.cli_output}
"val"
```

```bash  {.cli_example} {.command-line}
# Passing arguments to jq works, here is an unquoted result
$ ./compose.mk jb key=val | ./compose.mk jq -r .key
```
```bash {.cli_output}
val
```

```bash  {.cli_example} {.command-line}
# Now try yaml input, with yq
$ echo "key: val" | ./compose.mk yq .key
```
```bash {.cli_output}
val
```

The "wrapper" part is easy enough to see from the examples above, just wrapping familiar invocations with `compose.mk`.  But what exactly is being "proxied" here?  Well, the eagle-eyed reader will have noticed that it's kind of crazy that this actually works, because behind the scenes running `./compose.mk ...` is roughly the same as `make -f compose.mk ...`, and so you'd expect that the tail part of the command line is *arguments to make*.  And yet.. there is no make-target called `.key`.


Under the hood, invocations for proxy-wrappers begin with an actual `make` target, but before `make` parses beyond that, execution is short-circuited, and the rest of the command-line is consumed and passed on to the tool.  For details about how this works, see the [documentation for signals]({{mkdocs.site_relative_url}}/signals).

!!! danger "Caveats"

    Proxy-wrappers are very useful for simple stuff, but the wrapped tools `jq`, `yq`, and `jb` all have big surface area with a lot of edge-cases for optional arguments, loading files, with or without pipes.  **If your use-case involves lots of flags or nested quotes or something, *maybe don't assume that the wrapped invocation is 1:1 with the original tool*.**  There's only so much that can be done here for the standalone-mode for `compose.mk`, but note that [library-style usage is more flexible]({{mkdocs.site_relative_url}}/standard-lib/#structured-io-basics).

#### Other Wrappers 
<hr style="width:100%;border-bottom:3px solid black;">

Setting aside the big 3 tools that use [proxy-wrappers](#proxy-wrappers), other wrappers are simpler because `compose.mk` gets tactical and won't even try to expose a 1:1 interface.  Sometimes we accept arguments, but mostly we just pass data on pipes.  

You can see a few examples below, but this isn't an exhuastive list.  See also the documentation for [streams and pipes]({{mkdocs.site_relative_url}}/standard-lib/#structured-io-stream-types-pipes).

{{macros.embed_demo('tests/tool-wrappers.sh', github=github, type='bash', extra_label='')}}

Many of these targets are also available as macros, and might have more documentation available as part of the [library overview]({{mkdocs.site_relative_url}}/standard-lib).  See also [the API reference]({{mkdocs.site_relative_url}}/api).  

For stuff related to `tmux`, see the separate [documentation for the embedded TUI]({{mkdocs.site_relative_url}}/zero-config-tuis).  For a demo involving `chafa`, see [this workflow example]({{mkdocs.site_relative_url}}/standard-lib/#workflow-example-etl) or the [notebooking demo]({{mkdocs.site_relative_url}}/demos/notebooking).  Many demos use `jq` and `jb`, but see especially the documentation for [structured IO](/compose.mk/standard-lib#structured-io) and the [documentation for stages]({{mkdocs.site_relative_url}}/stages).

### References
<hr style="width:100%;border-bottom:3px solid black;">

[^1]: If you're wondering how and why stand-alone mode can work in the first place: since `compose.mk` is executable, `./compose.mk ...` is roughly equivalent to `make -f compose.mk ...`.

<script>
document.addEventListener('DOMContentLoaded', function() {setTimeout(function() {
	addImageToHeader('tool-overview','/{{mkdocs.config.site_name}}/img/tool.svg')
}, 100);});
</script>
{#
### Kung-Fu with Flux 

```bash
# Use `stream.nl.to.space` to convert newlines to spaces 
$ ls /tmp | ./compose.mk stream.nl.to.space
```

<hr style="width:95%;border-bottom:1px dashed black;">
<hr style="width:100%;border-bottom:3px solid black;">

### Logging Facilities

{{macros.img_link("demo-io.gif", mkdocs, "90%")}}

<hr style="width:100%;border-bottom:3px solid black;">

### Workflow Support

* [Clean, refactor, or port existing bash script](#) towards something that's easier to read and write.

If you prefer to learn from examples, you might want to just [get started](#makecompose-bridge) or skip to the main [cluster automation demo](/demos#demo-cluster-automation) or to a [tui demo](#embedded-tui).  If you're the type that needs to hear the motivation first, read on in the next section.
#}
