{% import 'macros.j2' as macros -%}

## CLI Help

<hr style="width:100%;border-bottom:3px solid black;">

When using `compose.mk` directly, help not only *works,* it goes beyond simply listing available targets, and actually parses and displays documentation per target, and per target-namespace. *(Under the hood, a dockerized version of [charmbracelete/glow](https://github.com/charmbracelet/glow) renders markdown.)*.

{{macros.img_link("tui-7.gif", mkdocs, "90%")}}


As seen in the animation above, there are several ways to invoke the help for `compose.mk`.  

See the examples below:

```bash
# list all targets 
$ ./compose.mk help

# help for a single target 
$ ./compose.mk help docker.run

# help for a module namespace with many targets
$ ./compose.mk help docker
```

## Help For Project Makefiles

<hr style="width:100%;border-bottom:3px solid black;">

To enable help for your project Makefile, `include compose.mk` somewhere near the top.  By itself, this enables target listing with `make help`, including both the inherited targets from `compose.mk` as well as the new targets that are project specific.

For technical reasons related to default argument parsing by `make`[^1],  invocations like `make help docker` **unfortunately cannot work with project makefiles.**  A work-around is to directly provide arguments like so:

```bash
$ make help search=docker.run
```

Note that for help to render properly, your targets need to use the following style for comments, which is inspired by python docstrings, and then help can be pulled automatically from source.

```Makefile

include compose.mk 

my-target:
	@# Comment line one
	@# **Markdown is supported.**
	echo your implementation here

my-parametric-target/%:
	@# Comment line one
	@# **Markdown is supported.**
	echo your implementation here
```

If the "search=" trick above won't work for you, see the next section for hints about lower-level access to target-help, target listing, and module/namespace help.

<hr style="width:100%;border-bottom:3px solid black;">

## Implementation Details

<hr style="width:100%;border-bottom:3px solid black;">

The implementation for help uses the `mk.help.*` family of targets, and if you want to customize help or error messages they might be useful.  

See the API for:

{% set targets=bash('./compose.mk mk.namespace.filter/mk.help') %}
{% set targets=targets.split('\n') %}
{%for target in targets %} {% set target=target.strip().replace('%','<arg>') %}{%if target%}
* [`{{target}}`]({{mkdocs.site_relative_url}}/api#{{target.replace('<','').replace('>','').replace('/','').replace('.','')}}){%endif%}{%endfor%}

Heavy lifting for parsing Makefile metadata comes from a dockerized version of the [pynchon tool]({{jinja.vars.pynchon_repo_url}}), which can parse help as well as more structural details like target-prerequisites / DAGs.  Since help involves targets and target-metadata, it's a special case of reflection, which you can read more about [in the standard-library docs]({{mkdocs.site_relative_url}}/standard-lib/#reflection-support).

<hr style="width:100%;border-bottom:3px solid black;">

[^1]: See the docs for [Supervisors & Signals]({{mkdocs.site_relative_url}}/signals)