{% import 'macros.j2' as macros -%}

## Compiler & Dialects
<hr style="width:100%;border-bottom:3px solid black;">

To avoid freaking out people who are just interested in [tools]({{mkdocs.site_relative_url}}/tool-mode) or [libraries]({{mkdocs.site_relative_url}}/standard-lib), the fact that [compose.mk is actually a programming language]({{mkdocs.site_relative_url}}/language) isn't emphasized in most docs/demos, and the shocking secret truth is safe to ignore.  If you *are* interested though, the [language overview]({{mkdocs.site_relative_url}}/language/#language-properties) is good background reading.

You could say that `compose.mk=Makefile + compose.mk standard library + optional extra syntax`.

!!! tip "TL;DR"
    1. The `compose.mk` language is called **CMK** or **CMK-lang**.
    1. Files use the `.cmk` extension by convention.
    1. CMK is a superset of Makefile, compiled into legal classic Makefile.
    1. Makefile is always valid CMK; the reverse might not be true.
    1. The compiler is contained inside `compose.mk`, and there are no other tools.
    1. The compiler is extensible, enabling new CMK dialects with user-defined config.

Crucially, writing code in the CMK language **does not add new core capabilities** to the stuff that `compose.mk` already does *without* CMK.  The point of CMK is to **eliminate lots of pesky dollar-signs and curly brackets** while it also **elevates various existing [container]({{mkdocs.site_relative_url}}/demos/matrioshka) and [polyglot]({{mkdocs.site_relative_url}}/demos/polyglots) idioms to native syntax.**  For more background about the compilation process itself, see [the implementation details section](#implementation-details).

Whether you love `make` or passionately hate it, you'll probably agree that default syntax can be very annoying.  Since `compose.mk` goes to great lengths to fix the *other* big problems with practical general usage, syntax is the only the problem left!  This actually matters a lot, not just for adoption or usage as a daily driver, but because [notation is part of how we think.](https://dl.acm.org/doi/pdf/10.1145/1283920.1283935)

### About CMK Demos
<hr style="width:100%;border-bottom:3px solid black;">

All examples written in CMK rather than pure Makefile can be found in the {{macros.repo_link('demos/cmk', github=github)}} folder  Almost all CMK demos are based on existing pure-Makefile demos, i.e. for any `demos/cmk/foo.cmk` there's a corresponding vanilla demo at `demos/foo.mk`.  

```bash {.cli_example}
# Run "foo" demo directly, using interpreter via shebang
$ ./demos/cmk/foo.cmk

# Run demo explicitly using interpreter
$ ./compose.mk mk.interpret! ./demos/cmk/foo.cmk

# Test the compiler without running the result
$ cat ./demos/cmk/foo.cmk | ./compose.mk mk.compiler
```

### Basic Example
<hr style="width:100%;border-bottom:3px solid black;">

Let's revisit the JSON emit/consume example that's part of the [structured IO docs]({{mkdocs.site_relative_url}}/standard-lib/#structured-io-basics).  The original code was simple, but rewriting this in CMK is even better and much more pretty:

{{macros.embed_demo(
  'demos/cmk/structured-io.cmk',type='cmk',
  github=github)}}

We'll get to the odd arrow syntax at the end of this section, but start with most basic stuff first. 

**New Interpreter:**
:  This example introduces `mk.interpret!` via a shebang that's different from other demos that use `make -f ..`.  As with other demos, this one is **executable directly** as `./demos/cmk/structured-io.cmk`.  Unlike other demos, we can't run it directly with `make`.  If you want to run a file that's *not* executable, use `./compose.mk mk.interpret! <filename>`.  We've introduced the more basic version of `mk.interpret` [elsewhere]({{mkdocs.site_relative_url}}/signals/#inheritance-interpreters) in a very different context.  This example is similar in effect, but **`mk.interpret!` opts into all the pre-processing / compilation / transpilation** stuff that allows us to extend the base syntax of `make` and use the more exotic stuff you see in the rest of the file.

**Implied Include:**
:  When using the interpreter, a line like `include compose.mk` is always implied, and of course this brings with it full access to the [standard library]({{mkdocs.site_relative_url}}/standard-lib).

**Function Calls Rewritten:**
:  Awkward stuff like `$(call log.target, ...)` can be written as `cmk.log.target(..)` instead.  Additionally, although we don't use it here,  [compose.import statements]({{mkdocs.site_relative_url}}/bridge/#other-import-statements) previously written as `$(eval $(call ..))` can be rewritten as simply `compose.import(..)`

**Recursive Calls Rewritten:**
:  Awkward stuff like `${make} foo` can be written as `this.foo` instead.  Recursive invocation of the current context is common, and absolutely critical for code-reuse.[^2] The choice of `this` for a new keyword is actually configurable too.. we'll get to that in the next section.

**As for that arrow syntax?**
:  These operators just help to make JSON IO feel more native, and are sugar to safely use `jq` and `jb` for parsing and pushing JSON, respectively, regardless of whether those tools are available on the host.  If you glanced at the [original code]({{mkdocs.site_relative_url}}/standard-lib/#structured-io-basics) that's "ported" to CMK-lang here, then you might notice that the only code-transformation rules we really need to get from **CMK -> Makefile** in this case are just *very simple string substititions*.

The next section explains the specific substitions that enable the code above at the same time as explaining "dialects" in general.

### About Dialects
<hr style="width:100%;border-bottom:3px solid black;">

**A dialect is just an array of paired substitition rules,** and during compilation these rules take effect everywhere *except* for inside define-blocks.  Using the [reflection capabilities]({{mkdocs.site_relative_url}}/standard-lib#reflection-support), we can show some info about the default dialect that the compiler supports like this:

```bash {.cli_example}
$ ./compose.mk mk.def.read/cmk.default.dialect
[
  ["ðŸ¡†", "${stream.stdin} | ${jq} -r"],
  ["ðŸ¡„", "${jb}"],
  ["this.", "${make} "]
  ...
]
```

The full dialect details are [available in the appendix](#appendix-default-dialect), but the rules shown above are the ones relevant to the [basic example we started with](#basic-example): all we've done so far is introduce new syntax for common stuff with `jq` and `jb` and calling `make` recursively.

-----------

It might not be obvious how useful and powerful that simple substition actually is here, so let's take a brief detour to peel back the layers.  Above is the dialect literal, but below you can see a first approximation of variable expansion.

As discussed in [structured IO docs]({{mkdocs.site_relative_url}}/standard-lib/#structured-io-basics), we try to use local tools if available, and fall back to docker.

```bash {.cli_example}
$ ./compose.mk mk.get/cmk.default.dialect
[
  [
    "ðŸ¡†",
    "cat /dev/stdin | /usr/bin/jq -r"
  ],
  [
    "ðŸ¡„",
    "docker container run --rm ghcr.io/h4l/json.bash/jb:${JB_CLI_VERSION:-0.2.2}",
  ],
  [
    "this.",
    "make -rs --warn-undefined-variables -f ./compose.mk "
  ],
  ...
]
```

Fallback works as advertised, and you can also see that there's actually yet another layer of expansion with a default value for tool versions that supports user-override.  Therefore *besides* being visually easy to parse and clarifying intent, the **usage of the arrow operators results in portable code with no extra tool installation.**  

### Compose File Example
<hr style="width:100%;border-bottom:3px solid black;">

Let's revisit the code from the [inlined compose-file demo]({{mkdocs.site_relative_url}}/demos/matrioshka/#inlined-compose-files), and port it to CMK.  Like the original demo, this embeds a compose file, creates target-scaffolding for the containers involved, and demonstrates task-dispatch for them.  

But this time we introduce the `â‹˜ name ..body.. â‹™` syntax for compose files.  *(NB: Unicode ahead, `â‹˜` isn't `<<<` !)*

{{macros.embed_demo(
    'demos/cmk/inlined-composefile.cmk', 
    bottom_right=macros.link_mirror(
      'demos/inlined-composefile.mk',
      base=mkdocs.site_relative_url+'/demos/matrioshka'),
    github=github)}}

Most of the differences here with the original demo are pretty obvious, and alternate equivalents are shown to make what's happening more clear, but let's walk through it.

!!! closer_look "Closer Look"
    1. As discussed in the [basic example](#basic-example) our CMK port does **not** need an `include compose.mk`.  
    1. Here we skip the [`compose.import.string(..)`]({{mkdocs.site_relative_url}}/bridge/#other-import-statements) that the original code used to create [target scaffolding for services]({{mkdocs.site_relative_url}}/bridge), and after declaration of services with `â‹˜ name ..body.. â‹™` all target handles are available immediately.  
    1. We replaced a more naive *"echo ..."* command with a call to `cmk.log` that's using some color.  

Most interestingly though, `<container_name>.dispatch(<target_name>)` now looks like a normal function invocation.  Also notice that `alternate_style1` shows that stacking up *multiple rewrite rules* for transpiler substition works the way you'd expect.

### About Sugar
<hr style="width:100%;border-bottom:3px solid black;">

Under the hood, the last example involves something slightly more complicated than the [dialects we saw earlier](#about-dialects), and this is called "sugar".

**Sugar is an array of triples representing `[sugar_start, sugar_end, sugar_template]`**.  Similar to dialects, we can dump the default sugar for the compiler by using `mk.def.read`.  A complete reference for sugar is [in the appendix](#appendix-default-sugar), but the part that's relevant for the last example is this:

```bash {.cli_example}
$ ./compose.mk mk.def.read/cmk.default.sugar
```
```bash {.cli_output}
[
	["â‹˜","â‹™","$(eval $(call compose.import.string,__NAME__,TRUE))"],
    ...
]
```

Sugar is used to transform input sources towards legal Makefile define-blocks while **giving those blocks additional semantics**.  Since define-blocks have names, every sugar also requires a name.

For the `sugar_template` element of the triple, we render it and add it after the define-block.  The rendering context is simple here, where `__NAME__` is simply replaced with the block's name.  So, looking back to the example.. that explains why the embedded compose file did not need to be explicitly imported.  

--------------

Template variables that are supported:

| Name       | Purpose                                                    |
|------------|------------------------------------------------------------|
| `__NAME__` | The block's name                                           |
| `__REST__` | Everything that comes after `sugar_end` up to newline [^3] |
| `__WITH__` | The contents of the with-clause, if one was used.          |
| `__AS__`   | The contents of the as-clause, if one was used.            |

We haven't seen the last two yet, because the [compose file example](#compose-file-example) in the previous section does not use them.  Read on in the next section for more details.

### Polyglot Example
<hr style="width:100%;border-bottom:3px solid black;">

CMK particularly shines at cleaning up the idioms you can see in the [polyglot index]({{mkdocs.site_relative_url}}), and almost every example is more clear and concise.  

{{macros.embed_demo(
    'demos/cmk/code-objects.cmk', 
    bottom_right=macros.link_mirror(
      'demos/code-objects.mk',
      base=mkdocs.site_relative_url+'/demos/polyglots'),
    github=github)}}

The example above introduces different syntax for bound vs unbound code, i.e. whether or not an interpreter has been declared.  Bound code uses the syntax `ã€š name ..body.. âŸ§ with .. as ..`, whereas unbound code uses `ðŸž¹ name ..body.. ðŸž¹`.  Note that both syntaxes **use unicode specials**, and should not be confused with normal square-brackets or asterisks!

### Dockerfile Example
<hr style="width:100%;border-bottom:3px solid black;">

Let's revisit the code from the [inlined Dockerfile demo]({{mkdocs.site_relative_url}}/demos/matrioshka/#inlined-dockerfile), and port it to CMK.  *(NB: Unicode ahead, `â«»`, isn't `///`!)*

Note that the `Dockerfile.` prefix as part of the block-name is required for declaration, but afterwards reference to the image/container won't use it.

{{macros.embed_demo(
    'demos/cmk/inlined-dockerfile.cmk', 
    bottom_right=macros.link_mirror(
      'demos/inlined-dockerfile.mk',
      link=mkdocs.site_relative_url+'/demos/matrioshka#inlined-dockerfile'),
    github=github)}}

It's much cleaner than the original now: no need for `$(eval $(call ..))` to clutter up the space, and first-class support means there's no need to memorize relevant parts of the `compose.mk` API.

### User-Defined Extensions
<hr style="width:100%;border-bottom:3px solid black;">

Both dialects and sugar can be defined at runtime on a per-file basis, basically allowing the code itself to describe aspects of the compiler that will be used on it.

!!! info "Info"
    File hints must occur after the shebang, before the first non-comment line, and must be legal JSON that specifies the full dialect/sugar to use.  This *overwrites* the default dialect/sugar, and does not append it!

Minified JSON is optional, and everything between the first and second `:::` will be used, so multi-line JSON is allowed, but must remain comment-prefixed.

#### User-Defined Dialects
<hr style="width:95%;border-bottom:1px dashed black;">

User-defined dialects require a hint at the top of the file.  Building on the [basic example](#basic-example), here's an example that changes the default jq/jb JSON operators to use different characters.

{{macros.embed_demo(
  'demos/cmk/user-dialect.cmk', 
  github=github,
  bottom_right=macros.link_mirror(
    'demos/structured-io.mk',
    link=mkdocs.site_relative_url + '/standard-lib/#structured-io-basics'))}}

To get the full current default dialect in a minified form that's ready for your own modifications, use `./compose.mk mk.def.read/cmk.default.dialect| jq -c`

#### User-Defined Sugar
<hr style="width:95%;border-bottom:1px dashed black;">

User-defined sugar requires a hint at the top of the file.  Building on the [compose file example](#compose-file-example), here's an example that changes the default syntax to use different characters.

{{macros.embed_demo(
  'demos/cmk/user-sugar.cmk', 
    github=github,
  bottom_right=macros.link_mirror(
    'demos/inlined-composefile.mk',
    base=mkdocs.site_relative_url + '/demos/matrioshka'))}}

To get the full current default sugar in a minified form that's ready for your own modifications, use `./compose.mk mk.def.read/cmk.default.sugar | jq -c`

### Status Info, Limitations, & Other Advice
<hr style="width:100%;border-bottom:3px solid black;">

!!! danger "Be Advised" 
    That compilation and interpreted CMK is more experimental than the rest of the project.  However if you're nervous about upstream changes due to depending on the default dialect, one option is to just [make it the user-defined default](#user-defined-dialect).  

That said, everything that's documented here is stable and unlikely to change.  Mainly *experimental* just means that testing so far is limited, [so please report bugs]({{github.repo_url}}/issues), but not until you've **[confirmed you're using GNU awk!]({{mkdocs.site_relative_url}}/integration/#compatibility-notes)**.

Per the rest of the design philosophy, the goal is to [freeze CMK after it's **useful** and **capable of being extended**]({{mkdocs.site_relative_url}}/but-why#forever-development-considered-harmful) and most future changes are probably optimizations rather than extensions.  See also the docs re: [Forks & Versioning]({{mkdocs.site_relative_url}}/integration/#forks-versioning) and [Contributing]({{mkdocs.site_relative_url}}/contributing).

### Implementation Details
<hr style="width:100%;border-bottom:3px solid black;">

Luckily, the target-language *(i.e. Makefile)* has almost no syntax itself and is ridiculously easy to generate.  This isn't that ambitious of a goal anyway!  The hard work for backend-idioms and other support is already done, and those are all Makefile-compatible.. thus transpiling is mostly just matching and rewriting some strings. [^1]

{{macros.commentary("*Ackshually* the compilation process is transpilation, not compilation, since this is source-to-source, and usually the resulting artifact is executed directly rather than saved, so you might also call it interpreted.  Since the entire process is *extremely simple*, you may also prefer to think of it as more like **preprocessing that supports user-defined configuration**.  Still.. the fact remains that CMK code is **not necessarily** legal Makefile without this step in the middle.",title="**Terminology:**")}}

**For the actual code-generation,** it's tempting to reach for any number of cool parser libraries, but you can probably tell based on the dialect/sugar specifications that what we need is very simple and closer to a regex.  We also want to avoid fancy tools that might require a dockerized toolchain, and even though it's just glorified string manipulation, `make` itself is not really up to the challenge.  The only tool for the job that's as fast and ubiquitous as `make` is `awk`, but this is still pretty daunting!

In an ironic twist, the requirement that [dialects](#about-dialects) and [sugar](#about-sugar) should be extensible actually makes it easier to see a solution.  The compilation pipeline basically works as follows:

1. One static `awk` script for dialects, accepting a single pair as arguments
1. One static `awk` script for sugar, accepting a single triplet as arguments 
1. Use `jq` to parse arrays, unpacking pairs/triples, rendering 1 awk CLI command for each
1. Use `bash` to run the script generated by `jq`.

Crazy?  Sure!  But also very clean in a specific way: *hopefully* the gnarly awk is a forgettable and super low-maintenance abstraction that no one ever thinks about again.  This isn't the full picture and leaves out a few special cases, like rewriting `$(call fun, args)` to `cmk.fun(args)` but again it's pretty stable with no maintenance required.  The only thing that `awk` really needs to know about Makefile syntax is.. *don't mess with content inside of define-blocks and comments*.

### Appendix
<hr style="width:100%;border-bottom:3px solid black;">

Other related documentation includes: The [more basic interpreter usage]({{mkdocs.site_relative_url}}/signals/#inheritance-interpreters), which allows for inheritance of the entire `compose.mk` standard library and signals, but skips compilation and does **not** allow syntactic extensions.  The [packaging support]({{mkdocs.site_relative_url}}/demos/packaging) generates executables, but *isn't* compilation.  And there's also [a few thoughts about style]({{mkdocs.site_relative_url}}/style).

*Data below is rendered from the latest source code.*

#### Appendix: Default Dialect
<hr style="width:95%;border-bottom:1px dashed black;">

```bash {.cli_example}
$ ./compose.mk mk.def.read/cmk.default.dialect
```
```json {.cli_output}
{{bash('./compose.mk mk.def.read/cmk.default.dialect')}}
```

#### Appendix: Default Sugar
<hr style="width:95%;border-bottom:1px dashed black;">

```bash {.cli_example}
$ ./compose.mk mk.def.read/cmk.default.sugar
```
```json {.cli_output}
{{bash('./compose.mk mk.def.read/cmk.default.sugar')}}
```

<hr style="width:100%;border-bottom:3px solid black;">

{# <script>
document.addEventListener('DOMContentLoaded', function() {
    setTimeout(function() {
        const heading = document.getElementById('raw-docker-support');
        const img = document.createElement('img');
        img.style.height = '2em'; img.style.verticalAlign = 'middle';
        img.src = '../img/docker.png'; 
        heading.insertBefore(img, heading.firstChild);
        img.style.marginRight = '10px';
        //heading.appendChild(img);
    }, 100); // Small delay to ensure ToC is already processed
});
</script> #}

[^1]: Note that during compilation for CMK code, this isn't just a naive a find/replace, because we do have to leave define-blocks alone
[^2]: Actually `compose.mk` takes recursive invocation so seriously that a significant effort is invested in fixing problems with `${MAKE}`. This results in the less shouty usage of `${make}`, which is also more robust, reliable, and predictable.  In `compose.mk` source code, there are more than 250 usages of `${make}`, but extensions can avoid the pain.  Literally if `self` was `${self}` and `this` was `${this}` everywhere, then the resulting RSI would be a public health crisis!
[^3]: Yes, up to newline.  Line feeds are not supported yet, but might be in the future.