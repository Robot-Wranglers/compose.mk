#!/usr/bin/env -S ./compose.mk mk.interpret!
# demos/cmk/inlined-composefile.cmk: 
#   CMK-lang translation of demos/inlined-composefile.mk
# USAGE: ./demos/cmk/inlined-composefile.cmk

⋘ inlined.services
services:
  alice: &base
    hostname: alice
    build:
      context: .
      dockerfile_inline: |
        FROM ${IMG_DEBIAN_BASE:-debian:bookworm-slim}
        RUN apt-get update -qq && apt-get install -qq -y make procps
    entrypoint: bash
    working_dir: /workspace
    volumes:
      - ${PWD}:/workspace
      - ${DOCKER_SOCKET:-/var/run/docker.sock}:/var/run/docker.sock
  bob:
    <<: *base
    hostname: bob
    build:
      context: .
      dockerfile_inline: |
        FROM ${IMG_ALPINE_BASE:-alpine:3.21.2}
        RUN apk add -q --update --no-cache \
          coreutils build-base bash procps-ng
⋙

# A private target, intended to run inside containers 
self.internal_task:; cmk.log(Running inside ${red}`hostname`)

# Dispatch demo:
#  Runs the private target inside containers, using 
#  syntax that looks like function-invocation.
__main__: \
	alice.dispatch(self.internal_task) \
	bob.dispatch(self.internal_task)

alternate_style1:
	@# Equivalent to above, using target-body instead of prereqs;
	@# For this scenario, using the `this.` prefix is required.
	this.alice.dispatch(self.internal_task) 
	this.bob.dispatch(self.internal_task)

# Equivalents for both of the above.
#   This is the more "classic" style in pure Makefile,
#   i.e. what compose.mk supports without any transpilation.
alternate_style2: \
	alice.dispatch/self.internal_task \
	bob.dispatch/self.internal_task

alternate_style3:
	@# Equivalent to above, using target-body instead of prereqs
	${make} alice.dispatch/self.internal_task 
	${make} bob.dispatch/self.internal_task
