#!/usr/bin/env -S ./compose.mk mk.interpret!
# CMK-lang translation of demos/code-objects.mk
# USAGE: ./demos/cmk/code-objects.cmk

# Main entrypoint, showing how to preview and run embedded code.
__main__: \
	hello_world1.preview hello_world1 \
	hello_world2 \
	hello_world3 \
	hello_world4.preview

# Code bound to a containerized interpreter using literals.
elixir.img=elixir:otp-27-alpine
elixir.interpreter=elixir
‚ü¶ hello_world1
import IO, only: [puts: 1]
puts("elixir World!")
System.halt(0)
‚üß with ${elixir.img}, ${elixir.interpreter} as container

# Code bound to a containerized interpreter using variables.
# In this case, you can accept user-overrides from env-vars.
export python_interpreter=python
export python_img?=python:3.11-slim-bookworm
‚ü¶ hello_world3
print('hello world 2')
‚üß with $${python_img}, $${python_interpreter} as container

# Code bound to a target-as-interpreter.
# Target must be parametric, then do something with the parameter!
‚ü¶ hello_world2
hello world2 !
‚üß with my_interpreter as target

# A custom interpreter, as used above.
# This always takes a file argument as a parameter:
# we do nothing except for displaying the file-contents.
my_interpreter/%:; cat ${*}

# Unbound code block: only `.preview` target is available 
# unless you bind something else to `.interpreter` later
üûπ hello_world4
print('hello world 4')
üûπ
