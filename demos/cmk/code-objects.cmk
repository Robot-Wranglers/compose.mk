#!/usr/bin/env -S ./compose.mk mk.interpret!
# demos/cmk/code-objects.cmk: 
#   CMK-lang translation of demos/code-objects.mk
# USAGE: ./demos/cmk/code-objects.cmk

python.img?=python:3.11-slim-bookworm
python.interpreter=python

# Unbound code block: only `.preview` target is available 
# unless you bind something else to `.interpreter` later
ðŸž¹ hello_world1
print('hello world 1')
ðŸž¹

# Code bound to a containerized interpreter using literals.
ã€š hello_world2
import IO, only: [puts: 1]
puts("elixir World!")
System.halt(0)
âŸ§ with elixir:otp-27-alpine, elixir as container

# Code bound to a containerized interpreter using variables.
# In this case, you can accept user-overrides from env-vars.
ã€š hello_world3
print('hello world 2')
âŸ§ with ${python.img}, ${python.interpreter} as container


# Code bound to a target-as-interpreter.
# Target must be parametric, then do something with the parameter!
ã€š hello_world4
hello world3 !
âŸ§ with show.file as target

# An example target, as used above.
show.file/%:; cat ${*}

# Main entrypoint, showing how to preview and run embedded code.
__main__: hello_world1.preview \
	hello_world2.preview hello_world2.run \
	hello_world3.run hello_world4.run
